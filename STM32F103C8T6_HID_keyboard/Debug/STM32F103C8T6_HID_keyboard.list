
STM32F103C8T6_HID_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003070  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800321c  0800321c  0001321c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000ec  20000000  08003224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008c4  200000ec  08003310  000200ec  2**2
                  ALLOC
  7 ._user_heap_stack 00004200  200009b0  08003310  000209b0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015a25  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002ef7  00000000  00000000  00035b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005136  00000000  00000000  00038a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000920  00000000  00000000  0003db68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009a0  00000000  00000000  0003e488  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000171a9  00000000  00000000  0003ee28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000bb75  00000000  00000000  00055fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0006df4a  00000000  00000000  00061b46  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000cfa90  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000014cc  00000000  00000000  000cfb0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ec 	.word	0x200000ec
 8000128:	00000000 	.word	0x00000000
 800012c:	08003164 	.word	0x08003164

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f0 	.word	0x200000f0
 8000148:	08003164 	.word	0x08003164

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <HAL_InitTick+0x24>)
 8000152:	6818      	ldr	r0, [r3, #0]
 8000154:	4b07      	ldr	r3, [pc, #28]	; (8000174 <HAL_InitTick+0x28>)
 8000156:	fba3 3000 	umull	r3, r0, r3, r0
 800015a:	0980      	lsrs	r0, r0, #6
 800015c:	f000 f890 	bl	8000280 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 f84a 	bl	8000200 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}
 8000170:	200000b4 	.word	0x200000b4
 8000174:	10624dd3 	.word	0x10624dd3

08000178 <HAL_Init>:
{
 8000178:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800017a:	4a07      	ldr	r2, [pc, #28]	; (8000198 <HAL_Init+0x20>)
 800017c:	6813      	ldr	r3, [r2, #0]
 800017e:	f043 0310 	orr.w	r3, r3, #16
 8000182:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000184:	2003      	movs	r0, #3
 8000186:	f000 f829 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800018a:	2000      	movs	r0, #0
 800018c:	f7ff ffde 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 8000190:	f002 fd76 	bl	8002c80 <HAL_MspInit>
}
 8000194:	2000      	movs	r0, #0
 8000196:	bd08      	pop	{r3, pc}
 8000198:	40022000 	.word	0x40022000

0800019c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800019c:	4a02      	ldr	r2, [pc, #8]	; (80001a8 <HAL_IncTick+0xc>)
 800019e:	6813      	ldr	r3, [r2, #0]
 80001a0:	3301      	adds	r3, #1
 80001a2:	6013      	str	r3, [r2, #0]
}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	20000120 	.word	0x20000120

080001ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001ac:	4b01      	ldr	r3, [pc, #4]	; (80001b4 <HAL_GetTick+0x8>)
 80001ae:	6818      	ldr	r0, [r3, #0]
}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	20000120 	.word	0x20000120

080001b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001b8:	b530      	push	{r4, r5, lr}
 80001ba:	b083      	sub	sp, #12
 80001bc:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80001be:	f7ff fff5 	bl	80001ac <HAL_GetTick>
 80001c2:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 80001c4:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001c6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001ca:	d000      	beq.n	80001ce <HAL_Delay+0x16>
  {
     wait++;
 80001cc:	3401      	adds	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80001ce:	f7ff ffed 	bl	80001ac <HAL_GetTick>
 80001d2:	1b40      	subs	r0, r0, r5
 80001d4:	42a0      	cmp	r0, r4
 80001d6:	d3fa      	bcc.n	80001ce <HAL_Delay+0x16>
  {
  }
}
 80001d8:	b003      	add	sp, #12
 80001da:	bd30      	pop	{r4, r5, pc}

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80001de:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001e4:	041b      	lsls	r3, r3, #16
 80001e6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e8:	0200      	lsls	r0, r0, #8
 80001ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ee:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80001f0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80001f4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80001f8:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000200:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000202:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
 8000204:	68db      	ldr	r3, [r3, #12]
 8000206:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c3 0407 	rsb	r4, r3, #7
 800020e:	2c04      	cmp	r4, #4
 8000210:	bf28      	it	cs
 8000212:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000214:	1d1d      	adds	r5, r3, #4
 8000216:	2d06      	cmp	r5, #6
 8000218:	d918      	bls.n	800024c <HAL_NVIC_SetPriority+0x4c>
 800021a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800021c:	f04f 35ff 	mov.w	r5, #4294967295
 8000220:	fa05 f404 	lsl.w	r4, r5, r4
 8000224:	ea21 0104 	bic.w	r1, r1, r4
 8000228:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800022a:	fa05 f303 	lsl.w	r3, r5, r3
 800022e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000232:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000234:	2800      	cmp	r0, #0
 8000236:	db0b      	blt.n	8000250 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000238:	0109      	lsls	r1, r1, #4
 800023a:	b2c9      	uxtb	r1, r1
 800023c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000240:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000244:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000248:	bc30      	pop	{r4, r5}
 800024a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	2300      	movs	r3, #0
 800024e:	e7e5      	b.n	800021c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	f000 000f 	and.w	r0, r0, #15
 8000254:	0109      	lsls	r1, r1, #4
 8000256:	b2c9      	uxtb	r1, r1
 8000258:	4b02      	ldr	r3, [pc, #8]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
 800025a:	5419      	strb	r1, [r3, r0]
 800025c:	e7f4      	b.n	8000248 <HAL_NVIC_SetPriority+0x48>
 800025e:	bf00      	nop
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000268:	f000 021f 	and.w	r2, r0, #31
 800026c:	0940      	lsrs	r0, r0, #5
 800026e:	2301      	movs	r3, #1
 8000270:	4093      	lsls	r3, r2
 8000272:	4a02      	ldr	r2, [pc, #8]	; (800027c <HAL_NVIC_EnableIRQ+0x14>)
 8000274:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	e000e100 	.word	0xe000e100

08000280 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	3801      	subs	r0, #1
 8000282:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000286:	d20a      	bcs.n	800029e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <HAL_SYSTICK_Config+0x24>)
 800028a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x28>)
 800028e:	21f0      	movs	r1, #240	; 0xf0
 8000290:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000294:	2000      	movs	r0, #0
 8000296:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000298:	2207      	movs	r2, #7
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800029e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ac:	2804      	cmp	r0, #4
 80002ae:	d005      	beq.n	80002bc <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002b0:	4a05      	ldr	r2, [pc, #20]	; (80002c8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80002b2:	6813      	ldr	r3, [r2, #0]
 80002b4:	f023 0304 	bic.w	r3, r3, #4
 80002b8:	6013      	str	r3, [r2, #0]
  }
}
 80002ba:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002bc:	4a02      	ldr	r2, [pc, #8]	; (80002c8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80002be:	6813      	ldr	r3, [r2, #0]
 80002c0:	f043 0304 	orr.w	r3, r3, #4
 80002c4:	6013      	str	r3, [r2, #0]
 80002c6:	4770      	bx	lr
 80002c8:	e000e010 	.word	0xe000e010

080002cc <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80002cc:	4770      	bx	lr

080002ce <HAL_SYSTICK_IRQHandler>:
{
 80002ce:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002d0:	f7ff fffc 	bl	80002cc <HAL_SYSTICK_Callback>
}
 80002d4:	bd08      	pop	{r3, pc}
	...

080002d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002d8:	b4f0      	push	{r4, r5, r6, r7}
 80002da:	b082      	sub	sp, #8
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002dc:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002de:	4635      	mov	r5, r6
 80002e0:	e0a1      	b.n	8000426 <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002e2:	2c00      	cmp	r4, #0
 80002e4:	d059      	beq.n	800039a <HAL_GPIO_Init+0xc2>
 80002e6:	2c01      	cmp	r4, #1
 80002e8:	d100      	bne.n	80002ec <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80002ea:	68ce      	ldr	r6, [r1, #12]
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002ec:	2bff      	cmp	r3, #255	; 0xff
 80002ee:	d868      	bhi.n	80003c2 <HAL_GPIO_Init+0xea>
 80002f0:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80002f2:	2bff      	cmp	r3, #255	; 0xff
 80002f4:	d868      	bhi.n	80003c8 <HAL_GPIO_Init+0xf0>
 80002f6:	00ac      	lsls	r4, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80002f8:	f8dc 2000 	ldr.w	r2, [ip]
 80002fc:	270f      	movs	r7, #15
 80002fe:	40a7      	lsls	r7, r4
 8000300:	ea22 0207 	bic.w	r2, r2, r7
 8000304:	fa06 f404 	lsl.w	r4, r6, r4
 8000308:	4322      	orrs	r2, r4
 800030a:	f8cc 2000 	str.w	r2, [ip]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800030e:	684a      	ldr	r2, [r1, #4]
 8000310:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000314:	f000 8086 	beq.w	8000424 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000318:	4a5e      	ldr	r2, [pc, #376]	; (8000494 <HAL_GPIO_Init+0x1bc>)
 800031a:	6994      	ldr	r4, [r2, #24]
 800031c:	f044 0401 	orr.w	r4, r4, #1
 8000320:	6194      	str	r4, [r2, #24]
 8000322:	6992      	ldr	r2, [r2, #24]
 8000324:	f002 0201 	and.w	r2, r2, #1
 8000328:	9201      	str	r2, [sp, #4]
 800032a:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 800032c:	08ac      	lsrs	r4, r5, #2
 800032e:	1ca7      	adds	r7, r4, #2
 8000330:	4a59      	ldr	r2, [pc, #356]	; (8000498 <HAL_GPIO_Init+0x1c0>)
 8000332:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000336:	f005 0703 	and.w	r7, r5, #3
 800033a:	00bf      	lsls	r7, r7, #2
 800033c:	f04f 0c0f 	mov.w	ip, #15
 8000340:	fa0c fc07 	lsl.w	ip, ip, r7
 8000344:	ea22 0c0c 	bic.w	ip, r2, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000348:	4a54      	ldr	r2, [pc, #336]	; (800049c <HAL_GPIO_Init+0x1c4>)
 800034a:	4290      	cmp	r0, r2
 800034c:	d042      	beq.n	80003d4 <HAL_GPIO_Init+0xfc>
 800034e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000352:	4290      	cmp	r0, r2
 8000354:	d07f      	beq.n	8000456 <HAL_GPIO_Init+0x17e>
 8000356:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800035a:	4290      	cmp	r0, r2
 800035c:	d07d      	beq.n	800045a <HAL_GPIO_Init+0x182>
 800035e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000362:	4290      	cmp	r0, r2
 8000364:	d034      	beq.n	80003d0 <HAL_GPIO_Init+0xf8>
 8000366:	2204      	movs	r2, #4
 8000368:	e035      	b.n	80003d6 <HAL_GPIO_Init+0xfe>
      switch (GPIO_Init->Mode)
 800036a:	4f4d      	ldr	r7, [pc, #308]	; (80004a0 <HAL_GPIO_Init+0x1c8>)
 800036c:	42bc      	cmp	r4, r7
 800036e:	d014      	beq.n	800039a <HAL_GPIO_Init+0xc2>
 8000370:	d90b      	bls.n	800038a <HAL_GPIO_Init+0xb2>
 8000372:	4f4c      	ldr	r7, [pc, #304]	; (80004a4 <HAL_GPIO_Init+0x1cc>)
 8000374:	42bc      	cmp	r4, r7
 8000376:	d010      	beq.n	800039a <HAL_GPIO_Init+0xc2>
 8000378:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800037c:	42bc      	cmp	r4, r7
 800037e:	d00c      	beq.n	800039a <HAL_GPIO_Init+0xc2>
 8000380:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000384:	42bc      	cmp	r4, r7
 8000386:	d1b1      	bne.n	80002ec <HAL_GPIO_Init+0x14>
 8000388:	e007      	b.n	800039a <HAL_GPIO_Init+0xc2>
 800038a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800038e:	42bc      	cmp	r4, r7
 8000390:	d003      	beq.n	800039a <HAL_GPIO_Init+0xc2>
 8000392:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000396:	42bc      	cmp	r4, r7
 8000398:	d1a8      	bne.n	80002ec <HAL_GPIO_Init+0x14>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800039a:	688c      	ldr	r4, [r1, #8]
 800039c:	b17c      	cbz	r4, 80003be <HAL_GPIO_Init+0xe6>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800039e:	2c01      	cmp	r4, #1
 80003a0:	d008      	beq.n	80003b4 <HAL_GPIO_Init+0xdc>
            GPIOx->BRR = ioposition;
 80003a2:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003a4:	2608      	movs	r6, #8
 80003a6:	e7a1      	b.n	80002ec <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80003a8:	68ce      	ldr	r6, [r1, #12]
 80003aa:	3608      	adds	r6, #8
          break;
 80003ac:	e79e      	b.n	80002ec <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80003ae:	68ce      	ldr	r6, [r1, #12]
 80003b0:	360c      	adds	r6, #12
          break;
 80003b2:	e79b      	b.n	80002ec <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 80003b4:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003b6:	2608      	movs	r6, #8
 80003b8:	e798      	b.n	80002ec <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80003ba:	2600      	movs	r6, #0
 80003bc:	e796      	b.n	80002ec <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80003be:	2604      	movs	r6, #4
 80003c0:	e794      	b.n	80002ec <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003c2:	f100 0c04 	add.w	ip, r0, #4
 80003c6:	e794      	b.n	80002f2 <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80003c8:	f1a5 0408 	sub.w	r4, r5, #8
 80003cc:	00a4      	lsls	r4, r4, #2
 80003ce:	e793      	b.n	80002f8 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003d0:	2203      	movs	r2, #3
 80003d2:	e000      	b.n	80003d6 <HAL_GPIO_Init+0xfe>
 80003d4:	2200      	movs	r2, #0
 80003d6:	40ba      	lsls	r2, r7
 80003d8:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2U] = temp;
 80003dc:	3402      	adds	r4, #2
 80003de:	4f2e      	ldr	r7, [pc, #184]	; (8000498 <HAL_GPIO_Init+0x1c0>)
 80003e0:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003e4:	684a      	ldr	r2, [r1, #4]
 80003e6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80003ea:	d038      	beq.n	800045e <HAL_GPIO_Init+0x186>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80003ec:	4c2e      	ldr	r4, [pc, #184]	; (80004a8 <HAL_GPIO_Init+0x1d0>)
 80003ee:	6822      	ldr	r2, [r4, #0]
 80003f0:	431a      	orrs	r2, r3
 80003f2:	6022      	str	r2, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003f4:	684a      	ldr	r2, [r1, #4]
 80003f6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80003fa:	d036      	beq.n	800046a <HAL_GPIO_Init+0x192>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80003fc:	4c2a      	ldr	r4, [pc, #168]	; (80004a8 <HAL_GPIO_Init+0x1d0>)
 80003fe:	6862      	ldr	r2, [r4, #4]
 8000400:	431a      	orrs	r2, r3
 8000402:	6062      	str	r2, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000404:	684a      	ldr	r2, [r1, #4]
 8000406:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800040a:	d034      	beq.n	8000476 <HAL_GPIO_Init+0x19e>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800040c:	4c26      	ldr	r4, [pc, #152]	; (80004a8 <HAL_GPIO_Init+0x1d0>)
 800040e:	68a2      	ldr	r2, [r4, #8]
 8000410:	431a      	orrs	r2, r3
 8000412:	60a2      	str	r2, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000414:	684a      	ldr	r2, [r1, #4]
 8000416:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800041a:	d032      	beq.n	8000482 <HAL_GPIO_Init+0x1aa>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800041c:	4c22      	ldr	r4, [pc, #136]	; (80004a8 <HAL_GPIO_Init+0x1d0>)
 800041e:	68e2      	ldr	r2, [r4, #12]
 8000420:	4313      	orrs	r3, r2
 8000422:	60e3      	str	r3, [r4, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000424:	3501      	adds	r5, #1
 8000426:	2d0f      	cmp	r5, #15
 8000428:	d831      	bhi.n	800048e <HAL_GPIO_Init+0x1b6>
    ioposition = (0x01U << position);
 800042a:	2201      	movs	r2, #1
 800042c:	40aa      	lsls	r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800042e:	680b      	ldr	r3, [r1, #0]
 8000430:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 8000432:	429a      	cmp	r2, r3
 8000434:	d1f6      	bne.n	8000424 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 8000436:	684c      	ldr	r4, [r1, #4]
 8000438:	2c12      	cmp	r4, #18
 800043a:	d0b8      	beq.n	80003ae <HAL_GPIO_Init+0xd6>
 800043c:	d895      	bhi.n	800036a <HAL_GPIO_Init+0x92>
 800043e:	2c02      	cmp	r4, #2
 8000440:	d0b2      	beq.n	80003a8 <HAL_GPIO_Init+0xd0>
 8000442:	f67f af4e 	bls.w	80002e2 <HAL_GPIO_Init+0xa>
 8000446:	2c03      	cmp	r4, #3
 8000448:	d0b7      	beq.n	80003ba <HAL_GPIO_Init+0xe2>
 800044a:	2c11      	cmp	r4, #17
 800044c:	f47f af4e 	bne.w	80002ec <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000450:	68ce      	ldr	r6, [r1, #12]
 8000452:	3604      	adds	r6, #4
          break;
 8000454:	e74a      	b.n	80002ec <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000456:	2201      	movs	r2, #1
 8000458:	e7bd      	b.n	80003d6 <HAL_GPIO_Init+0xfe>
 800045a:	2202      	movs	r2, #2
 800045c:	e7bb      	b.n	80003d6 <HAL_GPIO_Init+0xfe>
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800045e:	4c12      	ldr	r4, [pc, #72]	; (80004a8 <HAL_GPIO_Init+0x1d0>)
 8000460:	6822      	ldr	r2, [r4, #0]
 8000462:	ea22 0203 	bic.w	r2, r2, r3
 8000466:	6022      	str	r2, [r4, #0]
 8000468:	e7c4      	b.n	80003f4 <HAL_GPIO_Init+0x11c>
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800046a:	4c0f      	ldr	r4, [pc, #60]	; (80004a8 <HAL_GPIO_Init+0x1d0>)
 800046c:	6862      	ldr	r2, [r4, #4]
 800046e:	ea22 0203 	bic.w	r2, r2, r3
 8000472:	6062      	str	r2, [r4, #4]
 8000474:	e7c6      	b.n	8000404 <HAL_GPIO_Init+0x12c>
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000476:	4c0c      	ldr	r4, [pc, #48]	; (80004a8 <HAL_GPIO_Init+0x1d0>)
 8000478:	68a2      	ldr	r2, [r4, #8]
 800047a:	ea22 0203 	bic.w	r2, r2, r3
 800047e:	60a2      	str	r2, [r4, #8]
 8000480:	e7c8      	b.n	8000414 <HAL_GPIO_Init+0x13c>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000482:	4c09      	ldr	r4, [pc, #36]	; (80004a8 <HAL_GPIO_Init+0x1d0>)
 8000484:	68e2      	ldr	r2, [r4, #12]
 8000486:	ea22 0303 	bic.w	r3, r2, r3
 800048a:	60e3      	str	r3, [r4, #12]
 800048c:	e7ca      	b.n	8000424 <HAL_GPIO_Init+0x14c>
        }
      }
    }
  }
}
 800048e:	b002      	add	sp, #8
 8000490:	bcf0      	pop	{r4, r5, r6, r7}
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000
 8000498:	40010000 	.word	0x40010000
 800049c:	40010800 	.word	0x40010800
 80004a0:	10210000 	.word	0x10210000
 80004a4:	10310000 	.word	0x10310000
 80004a8:	40010400 	.word	0x40010400

080004ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004ac:	6883      	ldr	r3, [r0, #8]
 80004ae:	4219      	tst	r1, r3
 80004b0:	d101      	bne.n	80004b6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80004b2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80004b4:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80004b6:	2001      	movs	r0, #1
 80004b8:	4770      	bx	lr

080004ba <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004ba:	b912      	cbnz	r2, 80004c2 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004bc:	0409      	lsls	r1, r1, #16
 80004be:	6101      	str	r1, [r0, #16]
  }
}
 80004c0:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80004c2:	6101      	str	r1, [r0, #16]
 80004c4:	4770      	bx	lr

080004c6 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d066      	beq.n	8000598 <HAL_PCD_Init+0xd2>
{
 80004ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004cc:	b087      	sub	sp, #28
 80004ce:	4604      	mov	r4, r0
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80004d0:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 80004d4:	b1c3      	cbz	r3, 8000508 <HAL_PCD_Init+0x42>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004d6:	2303      	movs	r3, #3
 80004d8:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80004dc:	6820      	ldr	r0, [r4, #0]
 80004de:	f000 ffec 	bl	80014ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004e2:	4625      	mov	r5, r4
 80004e4:	f855 7b10 	ldr.w	r7, [r5], #16
 80004e8:	466e      	mov	r6, sp
 80004ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004ee:	682b      	ldr	r3, [r5, #0]
 80004f0:	6033      	str	r3, [r6, #0]
 80004f2:	1d23      	adds	r3, r4, #4
 80004f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80004f6:	4638      	mov	r0, r7
 80004f8:	f000 ffd0 	bl	800149c <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80004fc:	2100      	movs	r1, #0
 80004fe:	6820      	ldr	r0, [r4, #0]
 8000500:	f000 ffe5 	bl	80014ce <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000504:	2300      	movs	r3, #0
 8000506:	e015      	b.n	8000534 <HAL_PCD_Init+0x6e>
    hpcd->Lock = HAL_UNLOCKED;
 8000508:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
    HAL_PCD_MspInit(hpcd);
 800050c:	f002 fc54 	bl	8002db8 <HAL_PCD_MspInit>
 8000510:	e7e1      	b.n	80004d6 <HAL_PCD_Init+0x10>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000512:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8000516:	2101      	movs	r1, #1
 8000518:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
 800051c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000520:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000522:	2100      	movs	r1, #0
 8000524:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000528:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 800052a:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 800052c:	1c9a      	adds	r2, r3, #2
 800052e:	0152      	lsls	r2, r2, #5
 8000530:	50a1      	str	r1, [r4, r2]
  for (index = 0U; index < 15U ; index++)
 8000532:	3301      	adds	r3, #1
 8000534:	2b0e      	cmp	r3, #14
 8000536:	d9ec      	bls.n	8000512 <HAL_PCD_Init+0x4c>
  }
 
  for (index = 0U; index < 15U ; index++)
 8000538:	2300      	movs	r3, #0
 800053a:	e012      	b.n	8000562 <HAL_PCD_Init+0x9c>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 800053c:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8000540:	2100      	movs	r1, #0
 8000542:	f882 1229 	strb.w	r1, [r2, #553]	; 0x229
    hpcd->OUT_ep[index].num = index;
 8000546:	f882 3228 	strb.w	r3, [r2, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 800054a:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 800054c:	f882 122b 	strb.w	r1, [r2, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000550:	f8c2 1238 	str.w	r1, [r2, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000554:	f8c2 123c 	str.w	r1, [r2, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000558:	f103 0212 	add.w	r2, r3, #18
 800055c:	0152      	lsls	r2, r2, #5
 800055e:	50a1      	str	r1, [r4, r2]
  for (index = 0U; index < 15U ; index++)
 8000560:	3301      	adds	r3, #1
 8000562:	2b0e      	cmp	r3, #14
 8000564:	d9ea      	bls.n	800053c <HAL_PCD_Init+0x76>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000566:	4625      	mov	r5, r4
 8000568:	f855 7b10 	ldr.w	r7, [r5], #16
 800056c:	466e      	mov	r6, sp
 800056e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000570:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000572:	682b      	ldr	r3, [r5, #0]
 8000574:	6033      	str	r3, [r6, #0]
 8000576:	1d23      	adds	r3, r4, #4
 8000578:	cb0e      	ldmia	r3, {r1, r2, r3}
 800057a:	4638      	mov	r0, r7
 800057c:	f000 ffa9 	bl	80014d2 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8000580:	2500      	movs	r5, #0
 8000582:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8000586:	2301      	movs	r3, #1
 8000588:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 800058c:	6820      	ldr	r0, [r4, #0]
 800058e:	f001 fab4 	bl	8001afa <USB_DevDisconnect>
  return HAL_OK;
 8000592:	4628      	mov	r0, r5
}
 8000594:	b007      	add	sp, #28
 8000596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000598:	2001      	movs	r0, #1
}
 800059a:	4770      	bx	lr

0800059c <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800059c:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d010      	beq.n	80005c6 <HAL_PCD_Start+0x2a>
{
 80005a4:	b510      	push	{r4, lr}
 80005a6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005a8:	2101      	movs	r1, #1
 80005aa:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80005ae:	f002 fd2c 	bl	800300a <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80005b2:	6820      	ldr	r0, [r4, #0]
 80005b4:	f001 fa9f 	bl	8001af6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80005b8:	6820      	ldr	r0, [r4, #0]
 80005ba:	f000 ff76 	bl	80014aa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80005be:	2000      	movs	r0, #0
 80005c0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 80005c4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005c6:	2002      	movs	r0, #2
}
 80005c8:	4770      	bx	lr

080005ca <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80005ca:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d00d      	beq.n	80005ee <HAL_PCD_SetAddress+0x24>
{
 80005d2:	b510      	push	{r4, lr}
 80005d4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005d6:	2301      	movs	r3, #1
 80005d8:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 80005dc:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80005e0:	6800      	ldr	r0, [r0, #0]
 80005e2:	f001 fa82 	bl	8001aea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 80005ec:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005ee:	2002      	movs	r0, #2
}
 80005f0:	4770      	bx	lr

080005f2 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80005f2:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80005f4:	b24d      	sxtb	r5, r1
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	db1c      	blt.n	8000634 <HAL_PCD_EP_Open+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80005fa:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 80005fe:	0164      	lsls	r4, r4, #5
 8000600:	f504 740a 	add.w	r4, r4, #552	; 0x228
 8000604:	4404      	add	r4, r0
  }
  ep->num   = ep_addr & 0x7FU;
 8000606:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800060a:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800060c:	0fed      	lsrs	r5, r5, #31
 800060e:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 8000610:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 8000612:	70e3      	strb	r3, [r4, #3]
    
  __HAL_LOCK(hpcd);
 8000614:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8000618:	2b01      	cmp	r3, #1
 800061a:	d011      	beq.n	8000640 <HAL_PCD_EP_Open+0x4e>
 800061c:	4605      	mov	r5, r0
 800061e:	2301      	movs	r3, #1
 8000620:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000624:	4621      	mov	r1, r4
 8000626:	6800      	ldr	r0, [r0, #0]
 8000628:	f000 ff69 	bl	80014fe <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800062c:	2000      	movs	r0, #0
 800062e:	f885 0428 	strb.w	r0, [r5, #1064]	; 0x428
  return ret;
}
 8000632:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000634:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8000638:	0164      	lsls	r4, r4, #5
 800063a:	3428      	adds	r4, #40	; 0x28
 800063c:	4404      	add	r4, r0
 800063e:	e7e2      	b.n	8000606 <HAL_PCD_EP_Open+0x14>
  __HAL_LOCK(hpcd);
 8000640:	2002      	movs	r0, #2
 8000642:	e7f6      	b.n	8000632 <HAL_PCD_EP_Open+0x40>

08000644 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000644:	b24a      	sxtb	r2, r1
 8000646:	2a00      	cmp	r2, #0
 8000648:	db1b      	blt.n	8000682 <HAL_PCD_EP_Close+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800064a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800064e:	015b      	lsls	r3, r3, #5
 8000650:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000654:	4403      	add	r3, r0
  }
  ep->num   = ep_addr & 0x7FU;
 8000656:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800065a:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800065c:	0fd2      	lsrs	r2, r2, #31
 800065e:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8000660:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8000664:	2a01      	cmp	r2, #1
 8000666:	d012      	beq.n	800068e <HAL_PCD_EP_Close+0x4a>
{  
 8000668:	b510      	push	{r4, lr}
 800066a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800066c:	2201      	movs	r2, #1
 800066e:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000672:	4619      	mov	r1, r3
 8000674:	6800      	ldr	r0, [r0, #0]
 8000676:	f001 f8d6 	bl	8001826 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800067a:	2000      	movs	r0, #0
 800067c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 8000680:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000682:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000686:	015b      	lsls	r3, r3, #5
 8000688:	3328      	adds	r3, #40	; 0x28
 800068a:	4403      	add	r3, r0
 800068c:	e7e3      	b.n	8000656 <HAL_PCD_EP_Close+0x12>
  __HAL_LOCK(hpcd);
 800068e:	2002      	movs	r0, #2
}
 8000690:	4770      	bx	lr

08000692 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000692:	b570      	push	{r4, r5, r6, lr}
 8000694:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000698:	016c      	lsls	r4, r5, #5
 800069a:	f504 710a 	add.w	r1, r4, #552	; 0x228
 800069e:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80006a0:	4404      	add	r4, r0
 80006a2:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 80006a6:	f105 0212 	add.w	r2, r5, #18
 80006aa:	0152      	lsls	r2, r2, #5
 80006ac:	1886      	adds	r6, r0, r2
 80006ae:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 80006b0:	2300      	movs	r3, #0
 80006b2:	6073      	str	r3, [r6, #4]
  ep->is_in = 0U;
 80006b4:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  ep->num = ep_addr & 0x7FU;
 80006b8:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228

  if ((ep_addr & 0x7FU) == 0U)
 80006bc:	b125      	cbz	r5, 80006c8 <HAL_PCD_EP_Receive+0x36>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80006be:	6800      	ldr	r0, [r0, #0]
 80006c0:	f001 fa37 	bl	8001b32 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80006c4:	2000      	movs	r0, #0
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 80006c8:	6800      	ldr	r0, [r0, #0]
 80006ca:	f001 fa32 	bl	8001b32 <USB_EPStartXfer>
 80006ce:	e7f9      	b.n	80006c4 <HAL_PCD_EP_Receive+0x32>

080006d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006d0:	b570      	push	{r4, r5, r6, lr}
 80006d2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006d6:	016c      	lsls	r4, r5, #5
 80006d8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80006dc:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80006de:	4404      	add	r4, r0
 80006e0:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 80006e2:	1caa      	adds	r2, r5, #2
 80006e4:	0152      	lsls	r2, r2, #5
 80006e6:	1886      	adds	r6, r0, r2
 80006e8:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 80006ea:	2300      	movs	r3, #0
 80006ec:	6073      	str	r3, [r6, #4]
  ep->is_in = 1U;
 80006ee:	2301      	movs	r3, #1
 80006f0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  ep->num = ep_addr & 0x7FU;
 80006f4:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28

  if ((ep_addr & 0x7FU) == 0U)
 80006f8:	b125      	cbz	r5, 8000704 <HAL_PCD_EP_Transmit+0x34>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80006fa:	6800      	ldr	r0, [r0, #0]
 80006fc:	f001 fa19 	bl	8001b32 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000700:	2000      	movs	r0, #0
 8000702:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 8000704:	6800      	ldr	r0, [r0, #0]
 8000706:	f001 fa14 	bl	8001b32 <USB_EPStartXfer>
 800070a:	e7f9      	b.n	8000700 <HAL_PCD_EP_Transmit+0x30>

0800070c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800070c:	b570      	push	{r4, r5, r6, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	4604      	mov	r4, r0
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000712:	2300      	movs	r3, #0
 8000714:	f8ad 3006 	strh.w	r3, [sp, #6]
  __IO uint16_t wEPVal = 0;
 8000718:	f8ad 3004 	strh.w	r3, [sp, #4]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800071c:	6820      	ldr	r0, [r4, #0]
 800071e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000722:	b29b      	uxth	r3, r3
 8000724:	f8ad 3006 	strh.w	r3, [sp, #6]
 8000728:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800072c:	f000 820d 	beq.w	8000b4a <PCD_EP_ISR_Handler+0x43e>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000730:	f8bd 5006 	ldrh.w	r5, [sp, #6]
    
    if (epindex == 0)
 8000734:	f015 050f 	ands.w	r5, r5, #15
 8000738:	f040 80c2 	bne.w	80008c0 <PCD_EP_ISR_Handler+0x1b4>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800073c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000740:	f013 0f10 	tst.w	r3, #16
 8000744:	d050      	beq.n	80007e8 <PCD_EP_ISR_Handler+0xdc>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000746:	8803      	ldrh	r3, [r0, #0]
 8000748:	b29b      	uxth	r3, r3
 800074a:	f8ad 3004 	strh.w	r3, [sp, #4]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800074e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000752:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8000756:	d179      	bne.n	800084c <PCD_EP_ISR_Handler+0x140>
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000758:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800075c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000760:	d0dc      	beq.n	800071c <PCD_EP_ISR_Handler+0x10>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000762:	8803      	ldrh	r3, [r0, #0]
 8000764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000768:	051b      	lsls	r3, r3, #20
 800076a:	0d1b      	lsrs	r3, r3, #20
 800076c:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800076e:	6820      	ldr	r0, [r4, #0]
 8000770:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000774:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000778:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800077c:	3306      	adds	r3, #6
 800077e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000782:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800078a:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          
          if (ep->xfer_count != 0U)
 800078e:	2b00      	cmp	r3, #0
 8000790:	d17c      	bne.n	800088c <PCD_EP_ISR_Handler+0x180>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
            ep->xfer_buff+=ep->xfer_count;
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000792:	2100      	movs	r1, #0
 8000794:	4620      	mov	r0, r4
 8000796:	f002 fb37 	bl	8002e08 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800079a:	6823      	ldr	r3, [r4, #0]
 800079c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80007a0:	3206      	adds	r2, #6
 80007a2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80007a6:	f8d4 1238 	ldr.w	r1, [r4, #568]	; 0x238
 80007aa:	293e      	cmp	r1, #62	; 0x3e
 80007ac:	d97c      	bls.n	80008a8 <PCD_EP_ISR_Handler+0x19c>
 80007ae:	f3c1 124f 	ubfx	r2, r1, #5, #16
 80007b2:	f011 0f1f 	tst.w	r1, #31
 80007b6:	d101      	bne.n	80007bc <PCD_EP_ISR_Handler+0xb0>
 80007b8:	3a01      	subs	r2, #1
 80007ba:	b292      	uxth	r2, r2
 80007bc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80007c0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80007c4:	b292      	uxth	r2, r2
 80007c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80007ca:	6822      	ldr	r2, [r4, #0]
 80007cc:	8813      	ldrh	r3, [r2, #0]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007d8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80007dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	8013      	strh	r3, [r2, #0]
 80007e6:	e799      	b.n	800071c <PCD_EP_ISR_Handler+0x10>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80007e8:	8803      	ldrh	r3, [r0, #0]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80007f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80007f8:	6822      	ldr	r2, [r4, #0]
 80007fa:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80007fe:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8000802:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000806:	3302      	adds	r3, #2
 8000808:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800080c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000814:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000816:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000818:	4413      	add	r3, r2
 800081a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800081c:	2100      	movs	r1, #0
 800081e:	4620      	mov	r0, r4
 8000820:	f002 fafc 	bl	8002e1c <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000824:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000828:	2b00      	cmp	r3, #0
 800082a:	f43f af77 	beq.w	800071c <PCD_EP_ISR_Handler+0x10>
 800082e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000830:	2b00      	cmp	r3, #0
 8000832:	f47f af73 	bne.w	800071c <PCD_EP_ISR_Handler+0x10>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000836:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800083a:	6822      	ldr	r2, [r4, #0]
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000844:	2300      	movs	r3, #0
 8000846:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800084a:	e767      	b.n	800071c <PCD_EP_ISR_Handler+0x10>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800084c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000850:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000858:	3306      	adds	r3, #6
 800085a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800085e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000866:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800086a:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 800086e:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000872:	f001 fabb 	bl	8001dec <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000876:	6822      	ldr	r2, [r4, #0]
 8000878:	8813      	ldrh	r3, [r2, #0]
 800087a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800087e:	051b      	lsls	r3, r3, #20
 8000880:	0d1b      	lsrs	r3, r3, #20
 8000882:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000884:	4620      	mov	r0, r4
 8000886:	f002 fab7 	bl	8002df8 <HAL_PCD_SetupStageCallback>
 800088a:	e747      	b.n	800071c <PCD_EP_ISR_Handler+0x10>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800088c:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000890:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8000894:	f001 faaa 	bl	8001dec <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000898:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 800089c:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 80008a0:	4413      	add	r3, r2
 80008a2:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
 80008a6:	e774      	b.n	8000792 <PCD_EP_ISR_Handler+0x86>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80008a8:	f3c1 024f 	ubfx	r2, r1, #1, #16
 80008ac:	f011 0f01 	tst.w	r1, #1
 80008b0:	d001      	beq.n	80008b6 <PCD_EP_ISR_Handler+0x1aa>
 80008b2:	3201      	adds	r2, #1
 80008b4:	b292      	uxth	r2, r2
 80008b6:	0292      	lsls	r2, r2, #10
 80008b8:	b292      	uxth	r2, r2
 80008ba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80008be:	e784      	b.n	80007ca <PCD_EP_ISR_Handler+0xbe>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80008c0:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	f8ad 3004 	strh.w	r3, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80008ca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80008ce:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80008d2:	d135      	bne.n	8000940 <PCD_EP_ISR_Handler+0x234>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80008d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80008d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80008dc:	f43f af1e 	beq.w	800071c <PCD_EP_ISR_Handler+0x10>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80008e0:	6822      	ldr	r2, [r4, #0]
 80008e2:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80008ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 80008f6:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80008fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f040 80b2 	bne.w	8000a68 <PCD_EP_ISR_Handler+0x35c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000904:	6820      	ldr	r0, [r4, #0]
 8000906:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800090a:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 800090e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8000912:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000916:	3302      	adds	r3, #2
 8000918:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800091c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000924:	1caa      	adds	r2, r5, #2
 8000926:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 800092a:	6053      	str	r3, [r2, #4]
          if (ep->xfer_count != 0U)
 800092c:	2b00      	cmp	r3, #0
 800092e:	f000 80c6 	beq.w	8000abe <PCD_EP_ISR_Handler+0x3b2>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000932:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8000936:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000938:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800093a:	f001 f8e5 	bl	8001b08 <USB_WritePMA>
 800093e:	e0be      	b.n	8000abe <PCD_EP_ISR_Handler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000940:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000948:	051b      	lsls	r3, r3, #20
 800094a:	0d1b      	lsrs	r3, r3, #20
 800094c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000950:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8000954:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 8000958:	b9d3      	cbnz	r3, 8000990 <PCD_EP_ISR_Handler+0x284>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800095a:	6820      	ldr	r0, [r4, #0]
 800095c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000960:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8000964:	f892 2228 	ldrb.w	r2, [r2, #552]	; 0x228
 8000968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800096c:	3306      	adds	r3, #6
 800096e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000972:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8000976:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 800097a:	b386      	cbz	r6, 80009de <PCD_EP_ISR_Handler+0x2d2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800097c:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8000980:	4633      	mov	r3, r6
 8000982:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8000986:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 800098a:	f001 fa2f 	bl	8001dec <USB_ReadPMA>
 800098e:	e026      	b.n	80009de <PCD_EP_ISR_Handler+0x2d2>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000990:	6820      	ldr	r0, [r4, #0]
 8000992:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8000996:	f893 2228 	ldrb.w	r2, [r3, #552]	; 0x228
 800099a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800099e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80009a2:	d042      	beq.n	8000a2a <PCD_EP_ISR_Handler+0x31e>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80009a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80009a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80009ac:	3302      	adds	r3, #2
 80009ae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80009b2:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 80009b6:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 80009ba:	bb66      	cbnz	r6, 8000a16 <PCD_EP_ISR_Handler+0x30a>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 80009bc:	6822      	ldr	r2, [r4, #0]
 80009be:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80009c2:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80009c6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80009ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009ce:	051b      	lsls	r3, r3, #20
 80009d0:	0d1b      	lsrs	r3, r3, #20
 80009d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80009da:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count+=count;
 80009de:	f105 0312 	add.w	r3, r5, #18
 80009e2:	015b      	lsls	r3, r3, #5
 80009e4:	18e1      	adds	r1, r4, r3
 80009e6:	684a      	ldr	r2, [r1, #4]
 80009e8:	4432      	add	r2, r6
 80009ea:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=count;
 80009ec:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 80009f0:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
 80009f4:	4432      	add	r2, r6
 80009f6:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80009fa:	58e3      	ldr	r3, [r4, r3]
 80009fc:	b11b      	cbz	r3, 8000a06 <PCD_EP_ISR_Handler+0x2fa>
 80009fe:	f8d1 1238 	ldr.w	r1, [r1, #568]	; 0x238
 8000a02:	428e      	cmp	r6, r1
 8000a04:	d228      	bcs.n	8000a58 <PCD_EP_ISR_Handler+0x34c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000a06:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8000a0a:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000a0e:	4620      	mov	r0, r4
 8000a10:	f002 f9fa 	bl	8002e08 <HAL_PCD_DataOutStageCallback>
 8000a14:	e75e      	b.n	80008d4 <PCD_EP_ISR_Handler+0x1c8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000a16:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8000a1a:	4633      	mov	r3, r6
 8000a1c:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
 8000a20:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000a24:	f001 f9e2 	bl	8001dec <USB_ReadPMA>
 8000a28:	e7c8      	b.n	80009bc <PCD_EP_ISR_Handler+0x2b0>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000a2a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a32:	3306      	adds	r3, #6
 8000a34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a38:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8000a3c:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000a40:	2e00      	cmp	r6, #0
 8000a42:	d0bb      	beq.n	80009bc <PCD_EP_ISR_Handler+0x2b0>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000a44:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8000a48:	4633      	mov	r3, r6
 8000a4a:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000a4e:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000a52:	f001 f9cb 	bl	8001dec <USB_ReadPMA>
 8000a56:	e7b1      	b.n	80009bc <PCD_EP_ISR_Handler+0x2b0>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000a58:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8000a5c:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000a60:	4620      	mov	r0, r4
 8000a62:	f7ff fe16 	bl	8000692 <HAL_PCD_EP_Receive>
 8000a66:	e735      	b.n	80008d4 <PCD_EP_ISR_Handler+0x1c8>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000a68:	6820      	ldr	r0, [r4, #0]
 8000a6a:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8000a6e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000a72:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000a76:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000a7a:	d046      	beq.n	8000b0a <PCD_EP_ISR_Handler+0x3fe>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000a7c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a84:	3302      	adds	r3, #2
 8000a86:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a8a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a92:	1caa      	adds	r2, r5, #2
 8000a94:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8000a98:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 8000a9a:	bb7b      	cbnz	r3, 8000afc <PCD_EP_ISR_Handler+0x3f0>
            if (ep->xfer_count != 0U)
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000a9c:	6822      	ldr	r2, [r4, #0]
 8000a9e:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8000aa2:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000aa6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000aae:	051b      	lsls	r3, r3, #20
 8000ab0:	0d1b      	lsrs	r3, r3, #20
 8000ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aba:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000abe:	6822      	ldr	r2, [r4, #0]
 8000ac0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000ac4:	eb04 1045 	add.w	r0, r4, r5, lsl #5
 8000ac8:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8000acc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000ad6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000ada:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000ade:	1cab      	adds	r3, r5, #2
 8000ae0:	015b      	lsls	r3, r3, #5
 8000ae2:	18e1      	adds	r1, r4, r3
 8000ae4:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=ep->xfer_count;
 8000ae6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000ae8:	440a      	add	r2, r1
 8000aea:	63c2      	str	r2, [r0, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000aec:	58e3      	ldr	r3, [r4, r3]
 8000aee:	bb23      	cbnz	r3, 8000b3a <PCD_EP_ISR_Handler+0x42e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000af0:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8000af4:	4620      	mov	r0, r4
 8000af6:	f002 f991 	bl	8002e1c <HAL_PCD_DataInStageCallback>
 8000afa:	e60f      	b.n	800071c <PCD_EP_ISR_Handler+0x10>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000afc:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8000b00:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8000b02:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000b04:	f001 f800 	bl	8001b08 <USB_WritePMA>
 8000b08:	e7c8      	b.n	8000a9c <PCD_EP_ISR_Handler+0x390>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b0a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000b0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000b12:	3306      	adds	r3, #6
 8000b14:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b18:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b20:	1caa      	adds	r2, r5, #2
 8000b22:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8000b26:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d0b7      	beq.n	8000a9c <PCD_EP_ISR_Handler+0x390>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000b2c:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8000b30:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000b32:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000b34:	f000 ffe8 	bl	8001b08 <USB_WritePMA>
 8000b38:	e7b0      	b.n	8000a9c <PCD_EP_ISR_Handler+0x390>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b3a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000b3e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8000b42:	4620      	mov	r0, r4
 8000b44:	f7ff fdc4 	bl	80006d0 <HAL_PCD_EP_Transmit>
 8000b48:	e5e8      	b.n	800071c <PCD_EP_ISR_Handler+0x10>
        }
      } 
    }
  }
  return HAL_OK;
}
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	b002      	add	sp, #8
 8000b4e:	bd70      	pop	{r4, r5, r6, pc}

08000b50 <HAL_PCD_IRQHandler>:
{ 
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000b54:	6800      	ldr	r0, [r0, #0]
 8000b56:	f000 ffd2 	bl	8001afe <USB_ReadInterrupts>
 8000b5a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8000b5e:	d145      	bne.n	8000bec <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000b60:	6820      	ldr	r0, [r4, #0]
 8000b62:	f000 ffcc 	bl	8001afe <USB_ReadInterrupts>
 8000b66:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8000b6a:	d143      	bne.n	8000bf4 <HAL_PCD_IRQHandler+0xa4>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000b6c:	6820      	ldr	r0, [r4, #0]
 8000b6e:	f000 ffc6 	bl	8001afe <USB_ReadInterrupts>
 8000b72:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8000b76:	d008      	beq.n	8000b8a <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000b78:	6822      	ldr	r2, [r4, #0]
 8000b7a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000b8a:	6820      	ldr	r0, [r4, #0]
 8000b8c:	f000 ffb7 	bl	8001afe <USB_ReadInterrupts>
 8000b90:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8000b94:	d008      	beq.n	8000ba8 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000b96:	6822      	ldr	r2, [r4, #0]
 8000b98:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000ba8:	6820      	ldr	r0, [r4, #0]
 8000baa:	f000 ffa8 	bl	8001afe <USB_ReadInterrupts>
 8000bae:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8000bb2:	d130      	bne.n	8000c16 <HAL_PCD_IRQHandler+0xc6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000bb4:	6820      	ldr	r0, [r4, #0]
 8000bb6:	f000 ffa2 	bl	8001afe <USB_ReadInterrupts>
 8000bba:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8000bbe:	d149      	bne.n	8000c54 <HAL_PCD_IRQHandler+0x104>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000bc0:	6820      	ldr	r0, [r4, #0]
 8000bc2:	f000 ff9c 	bl	8001afe <USB_ReadInterrupts>
 8000bc6:	f410 7f00 	tst.w	r0, #512	; 0x200
 8000bca:	d164      	bne.n	8000c96 <HAL_PCD_IRQHandler+0x146>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000bcc:	6820      	ldr	r0, [r4, #0]
 8000bce:	f000 ff96 	bl	8001afe <USB_ReadInterrupts>
 8000bd2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8000bd6:	d008      	beq.n	8000bea <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000bd8:	6822      	ldr	r2, [r4, #0]
 8000bda:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000bea:	bd10      	pop	{r4, pc}
    PCD_EP_ISR_Handler(hpcd);
 8000bec:	4620      	mov	r0, r4
 8000bee:	f7ff fd8d 	bl	800070c <PCD_EP_ISR_Handler>
 8000bf2:	e7b5      	b.n	8000b60 <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000bf4:	6822      	ldr	r2, [r4, #0]
 8000bf6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000c06:	4620      	mov	r0, r4
 8000c08:	f002 f917 	bl	8002e3a <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4620      	mov	r0, r4
 8000c10:	f7ff fcdb 	bl	80005ca <HAL_PCD_SetAddress>
 8000c14:	e7aa      	b.n	8000b6c <HAL_PCD_IRQHandler+0x1c>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000c16:	6822      	ldr	r2, [r4, #0]
 8000c18:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	f023 0304 	bic.w	r3, r3, #4
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000c28:	6822      	ldr	r2, [r4, #0]
 8000c2a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	f023 0308 	bic.w	r3, r3, #8
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f002 f91a 	bl	8002e74 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000c40:	6822      	ldr	r2, [r4, #0]
 8000c42:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8000c52:	e7af      	b.n	8000bb4 <HAL_PCD_IRQHandler+0x64>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000c54:	6822      	ldr	r2, [r4, #0]
 8000c56:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000c5a:	f043 0308 	orr.w	r3, r3, #8
 8000c5e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000c62:	6822      	ldr	r2, [r4, #0]
 8000c64:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000c74:	6822      	ldr	r2, [r4, #0]
 8000c76:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000c82:	6820      	ldr	r0, [r4, #0]
 8000c84:	f000 ff3b 	bl	8001afe <USB_ReadInterrupts>
 8000c88:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8000c8c:	d198      	bne.n	8000bc0 <HAL_PCD_IRQHandler+0x70>
      HAL_PCD_SuspendCallback(hpcd);
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f002 f8e0 	bl	8002e54 <HAL_PCD_SuspendCallback>
 8000c94:	e794      	b.n	8000bc0 <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000c96:	6822      	ldr	r2, [r4, #0]
 8000c98:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f002 f8c0 	bl	8002e2e <HAL_PCD_SOFCallback>
 8000cae:	e78d      	b.n	8000bcc <HAL_PCD_IRQHandler+0x7c>

08000cb0 <HAL_PCD_EP_SetStall>:
{
 8000cb0:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000cb2:	b24a      	sxtb	r2, r1
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	db1b      	blt.n	8000cf0 <HAL_PCD_EP_SetStall+0x40>
    ep = &hpcd->OUT_ep[ep_addr];
 8000cb8:	014b      	lsls	r3, r1, #5
 8000cba:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000cbe:	4403      	add	r3, r0
  ep->is_stall = 1U;
 8000cc0:	2401      	movs	r4, #1
 8000cc2:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8000cc4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8000cc8:	701d      	strb	r5, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000cca:	0fd2      	lsrs	r2, r2, #31
 8000ccc:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 8000cce:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8000cd2:	42a2      	cmp	r2, r4
 8000cd4:	d018      	beq.n	8000d08 <HAL_PCD_EP_SetStall+0x58>
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000cde:	4619      	mov	r1, r3
 8000ce0:	6800      	ldr	r0, [r0, #0]
 8000ce2:	f000 fe82 	bl	80019ea <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000ce6:	b14d      	cbz	r5, 8000cfc <HAL_PCD_EP_SetStall+0x4c>
  __HAL_UNLOCK(hpcd); 
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 8000cee:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000cf0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000cf4:	015b      	lsls	r3, r3, #5
 8000cf6:	3328      	adds	r3, #40	; 0x28
 8000cf8:	4403      	add	r3, r0
 8000cfa:	e7e1      	b.n	8000cc0 <HAL_PCD_EP_SetStall+0x10>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000cfc:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000d00:	6820      	ldr	r0, [r4, #0]
 8000d02:	f000 feff 	bl	8001b04 <USB_EP0_OutStart>
 8000d06:	e7ef      	b.n	8000ce8 <HAL_PCD_EP_SetStall+0x38>
  __HAL_LOCK(hpcd);
 8000d08:	2002      	movs	r0, #2
 8000d0a:	e7f0      	b.n	8000cee <HAL_PCD_EP_SetStall+0x3e>

08000d0c <HAL_PCD_EP_ClrStall>:
{
 8000d0c:	b510      	push	{r4, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000d0e:	b24a      	sxtb	r2, r1
 8000d10:	2a00      	cmp	r2, #0
 8000d12:	db1a      	blt.n	8000d4a <HAL_PCD_EP_ClrStall+0x3e>
    ep = &hpcd->OUT_ep[ep_addr];
 8000d14:	014b      	lsls	r3, r1, #5
 8000d16:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000d1a:	4403      	add	r3, r0
  ep->is_stall = 0U;
 8000d1c:	2400      	movs	r4, #0
 8000d1e:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8000d20:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000d24:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000d26:	0fd2      	lsrs	r2, r2, #31
 8000d28:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd); 
 8000d2a:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8000d2e:	2a01      	cmp	r2, #1
 8000d30:	d011      	beq.n	8000d56 <HAL_PCD_EP_ClrStall+0x4a>
 8000d32:	4604      	mov	r4, r0
 8000d34:	2201      	movs	r2, #1
 8000d36:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	6800      	ldr	r0, [r0, #0]
 8000d3e:	f000 fe8b 	bl	8001a58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000d42:	2000      	movs	r0, #0
 8000d44:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 8000d48:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d4a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000d4e:	015b      	lsls	r3, r3, #5
 8000d50:	3328      	adds	r3, #40	; 0x28
 8000d52:	4403      	add	r3, r0
 8000d54:	e7e2      	b.n	8000d1c <HAL_PCD_EP_ClrStall+0x10>
  __HAL_LOCK(hpcd); 
 8000d56:	2002      	movs	r0, #2
 8000d58:	e7f6      	b.n	8000d48 <HAL_PCD_EP_ClrStall+0x3c>

08000d5a <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000d5a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000d5e:	d00c      	beq.n	8000d7a <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d60:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000d64:	0149      	lsls	r1, r1, #5
 8000d66:	3128      	adds	r1, #40	; 0x28
 8000d68:	4401      	add	r1, r0
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000d6a:	b15a      	cbz	r2, 8000d84 <HAL_PCDEx_PMAConfig+0x2a>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	728a      	strb	r2, [r1, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000d70:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000d72:	0c1b      	lsrs	r3, r3, #16
 8000d74:	810b      	strh	r3, [r1, #8]
  }
  
  return HAL_OK; 
}
 8000d76:	2000      	movs	r0, #0
 8000d78:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8000d7a:	0149      	lsls	r1, r1, #5
 8000d7c:	f501 710a 	add.w	r1, r1, #552	; 0x228
 8000d80:	4401      	add	r1, r0
 8000d82:	e7f2      	b.n	8000d6a <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 0U;
 8000d84:	728a      	strb	r2, [r1, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 8000d86:	808b      	strh	r3, [r1, #4]
 8000d88:	e7f5      	b.n	8000d76 <HAL_PCDEx_PMAConfig+0x1c>
	...

08000d8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000d8c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <RCC_Delay+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <RCC_Delay+0x28>)
 8000d94:	fba2 2303 	umull	r2, r3, r2, r3
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	fb00 f003 	mul.w	r0, r0, r3
 8000d9e:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000da0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000da2:	9b01      	ldr	r3, [sp, #4]
 8000da4:	1e5a      	subs	r2, r3, #1
 8000da6:	9201      	str	r2, [sp, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1f9      	bne.n	8000da0 <RCC_Delay+0x14>
}
 8000dac:	b002      	add	sp, #8
 8000dae:	4770      	bx	lr
 8000db0:	200000b4 	.word	0x200000b4
 8000db4:	10624dd3 	.word	0x10624dd3

08000db8 <HAL_RCC_OscConfig>:
{
 8000db8:	b570      	push	{r4, r5, r6, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dbe:	6803      	ldr	r3, [r0, #0]
 8000dc0:	f013 0f01 	tst.w	r3, #1
 8000dc4:	d02c      	beq.n	8000e20 <HAL_RCC_OscConfig+0x68>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dc6:	4bab      	ldr	r3, [pc, #684]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 030c 	and.w	r3, r3, #12
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	d01d      	beq.n	8000e0e <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dd2:	4ba8      	ldr	r3, [pc, #672]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 030c 	and.w	r3, r3, #12
 8000dda:	2b08      	cmp	r3, #8
 8000ddc:	d012      	beq.n	8000e04 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dde:	6863      	ldr	r3, [r4, #4]
 8000de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de4:	d041      	beq.n	8000e6a <HAL_RCC_OscConfig+0xb2>
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d155      	bne.n	8000e96 <HAL_RCC_OscConfig+0xde>
 8000dea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dee:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	e037      	b.n	8000e74 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e04:	4b9b      	ldr	r3, [pc, #620]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000e0c:	d0e7      	beq.n	8000dde <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e0e:	4b99      	ldr	r3, [pc, #612]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e16:	d003      	beq.n	8000e20 <HAL_RCC_OscConfig+0x68>
 8000e18:	6863      	ldr	r3, [r4, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 81ae 	beq.w	800117c <HAL_RCC_OscConfig+0x3c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	f013 0f02 	tst.w	r3, #2
 8000e26:	d076      	beq.n	8000f16 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e28:	4b92      	ldr	r3, [pc, #584]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f013 0f0c 	tst.w	r3, #12
 8000e30:	d05f      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e32:	4b90      	ldr	r3, [pc, #576]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 030c 	and.w	r3, r3, #12
 8000e3a:	2b08      	cmp	r3, #8
 8000e3c:	d054      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e3e:	6923      	ldr	r3, [r4, #16]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 808a 	beq.w	8000f5a <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8000e46:	4b8c      	ldr	r3, [pc, #560]	; (8001078 <HAL_RCC_OscConfig+0x2c0>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e4c:	f7ff f9ae 	bl	80001ac <HAL_GetTick>
 8000e50:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e52:	4b88      	ldr	r3, [pc, #544]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f013 0f02 	tst.w	r3, #2
 8000e5a:	d175      	bne.n	8000f48 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5c:	f7ff f9a6 	bl	80001ac <HAL_GetTick>
 8000e60:	1b40      	subs	r0, r0, r5
 8000e62:	2802      	cmp	r0, #2
 8000e64:	d9f5      	bls.n	8000e52 <HAL_RCC_OscConfig+0x9a>
            return HAL_TIMEOUT;
 8000e66:	2003      	movs	r0, #3
 8000e68:	e18b      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6a:	4a82      	ldr	r2, [pc, #520]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000e6c:	6813      	ldr	r3, [r2, #0]
 8000e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e72:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e74:	6863      	ldr	r3, [r4, #4]
 8000e76:	b343      	cbz	r3, 8000eca <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000e78:	f7ff f998 	bl	80001ac <HAL_GetTick>
 8000e7c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7e:	4b7d      	ldr	r3, [pc, #500]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e86:	d1cb      	bne.n	8000e20 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e88:	f7ff f990 	bl	80001ac <HAL_GetTick>
 8000e8c:	1b40      	subs	r0, r0, r5
 8000e8e:	2864      	cmp	r0, #100	; 0x64
 8000e90:	d9f5      	bls.n	8000e7e <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8000e92:	2003      	movs	r0, #3
 8000e94:	e175      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e9a:	d009      	beq.n	8000eb0 <HAL_RCC_OscConfig+0xf8>
 8000e9c:	4b75      	ldr	r3, [pc, #468]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	e7e1      	b.n	8000e74 <HAL_RCC_OscConfig+0xbc>
 8000eb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000eb4:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	e7d4      	b.n	8000e74 <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 8000eca:	f7ff f96f 	bl	80001ac <HAL_GetTick>
 8000ece:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed0:	4b68      	ldr	r3, [pc, #416]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ed8:	d0a2      	beq.n	8000e20 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eda:	f7ff f967 	bl	80001ac <HAL_GetTick>
 8000ede:	1b40      	subs	r0, r0, r5
 8000ee0:	2864      	cmp	r0, #100	; 0x64
 8000ee2:	d9f5      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	e14c      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ee8:	4b62      	ldr	r3, [pc, #392]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000ef0:	d1a5      	bne.n	8000e3e <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef2:	4b60      	ldr	r3, [pc, #384]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f013 0f02 	tst.w	r3, #2
 8000efa:	d004      	beq.n	8000f06 <HAL_RCC_OscConfig+0x14e>
 8000efc:	6923      	ldr	r3, [r4, #16]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d001      	beq.n	8000f06 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 8000f02:	2001      	movs	r0, #1
 8000f04:	e13d      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f06:	4a5b      	ldr	r2, [pc, #364]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000f08:	6813      	ldr	r3, [r2, #0]
 8000f0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f0e:	6961      	ldr	r1, [r4, #20]
 8000f10:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f14:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	f013 0f08 	tst.w	r3, #8
 8000f1c:	d032      	beq.n	8000f84 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f1e:	69a3      	ldr	r3, [r4, #24]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d05b      	beq.n	8000fdc <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 8000f24:	4b55      	ldr	r3, [pc, #340]	; (800107c <HAL_RCC_OscConfig+0x2c4>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f2a:	f7ff f93f 	bl	80001ac <HAL_GetTick>
 8000f2e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f30:	4b50      	ldr	r3, [pc, #320]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	f013 0f02 	tst.w	r3, #2
 8000f38:	d121      	bne.n	8000f7e <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f3a:	f7ff f937 	bl	80001ac <HAL_GetTick>
 8000f3e:	1b40      	subs	r0, r0, r5
 8000f40:	2802      	cmp	r0, #2
 8000f42:	d9f5      	bls.n	8000f30 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8000f44:	2003      	movs	r0, #3
 8000f46:	e11c      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f48:	4a4a      	ldr	r2, [pc, #296]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000f4a:	6813      	ldr	r3, [r2, #0]
 8000f4c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f50:	6961      	ldr	r1, [r4, #20]
 8000f52:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e7dd      	b.n	8000f16 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000f5a:	4b47      	ldr	r3, [pc, #284]	; (8001078 <HAL_RCC_OscConfig+0x2c0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f60:	f7ff f924 	bl	80001ac <HAL_GetTick>
 8000f64:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f66:	4b43      	ldr	r3, [pc, #268]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f013 0f02 	tst.w	r3, #2
 8000f6e:	d0d2      	beq.n	8000f16 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f70:	f7ff f91c 	bl	80001ac <HAL_GetTick>
 8000f74:	1b40      	subs	r0, r0, r5
 8000f76:	2802      	cmp	r0, #2
 8000f78:	d9f5      	bls.n	8000f66 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	e101      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
      RCC_Delay(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff ff04 	bl	8000d8c <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	f013 0f04 	tst.w	r3, #4
 8000f8a:	f000 8097 	beq.w	80010bc <HAL_RCC_OscConfig+0x304>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f8e:	4b39      	ldr	r3, [pc, #228]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000f96:	d133      	bne.n	8001000 <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f98:	4b36      	ldr	r3, [pc, #216]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000f9a:	69da      	ldr	r2, [r3, #28]
 8000f9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fa0:	61da      	str	r2, [r3, #28]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000fac:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fae:	4b34      	ldr	r3, [pc, #208]	; (8001080 <HAL_RCC_OscConfig+0x2c8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000fb6:	d025      	beq.n	8001004 <HAL_RCC_OscConfig+0x24c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb8:	68e3      	ldr	r3, [r4, #12]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d036      	beq.n	800102c <HAL_RCC_OscConfig+0x274>
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d14c      	bne.n	800105c <HAL_RCC_OscConfig+0x2a4>
 8000fc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fc6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	f022 0201 	bic.w	r2, r2, #1
 8000fd0:	621a      	str	r2, [r3, #32]
 8000fd2:	6a1a      	ldr	r2, [r3, #32]
 8000fd4:	f022 0204 	bic.w	r2, r2, #4
 8000fd8:	621a      	str	r2, [r3, #32]
 8000fda:	e02c      	b.n	8001036 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_DISABLE();
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <HAL_RCC_OscConfig+0x2c4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000fe2:	f7ff f8e3 	bl	80001ac <HAL_GetTick>
 8000fe6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	f013 0f02 	tst.w	r3, #2
 8000ff0:	d0c8      	beq.n	8000f84 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ff2:	f7ff f8db 	bl	80001ac <HAL_GetTick>
 8000ff6:	1b40      	subs	r0, r0, r5
 8000ff8:	2802      	cmp	r0, #2
 8000ffa:	d9f5      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x230>
          return HAL_TIMEOUT;
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	e0c0      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
    FlagStatus       pwrclkchanged = RESET;
 8001000:	2500      	movs	r5, #0
 8001002:	e7d4      	b.n	8000fae <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001004:	4a1e      	ldr	r2, [pc, #120]	; (8001080 <HAL_RCC_OscConfig+0x2c8>)
 8001006:	6813      	ldr	r3, [r2, #0]
 8001008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800100e:	f7ff f8cd 	bl	80001ac <HAL_GetTick>
 8001012:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <HAL_RCC_OscConfig+0x2c8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f413 7f80 	tst.w	r3, #256	; 0x100
 800101c:	d1cc      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800101e:	f7ff f8c5 	bl	80001ac <HAL_GetTick>
 8001022:	1b80      	subs	r0, r0, r6
 8001024:	2864      	cmp	r0, #100	; 0x64
 8001026:	d9f5      	bls.n	8001014 <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 8001028:	2003      	movs	r0, #3
 800102a:	e0aa      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 800102e:	6a13      	ldr	r3, [r2, #32]
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001036:	68e3      	ldr	r3, [r4, #12]
 8001038:	b373      	cbz	r3, 8001098 <HAL_RCC_OscConfig+0x2e0>
      tickstart = HAL_GetTick();
 800103a:	f7ff f8b7 	bl	80001ac <HAL_GetTick>
 800103e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	f013 0f02 	tst.w	r3, #2
 8001048:	d137      	bne.n	80010ba <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800104a:	f7ff f8af 	bl	80001ac <HAL_GetTick>
 800104e:	1b80      	subs	r0, r0, r6
 8001050:	f241 3388 	movw	r3, #5000	; 0x1388
 8001054:	4298      	cmp	r0, r3
 8001056:	d9f3      	bls.n	8001040 <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 8001058:	2003      	movs	r0, #3
 800105a:	e092      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800105c:	2b05      	cmp	r3, #5
 800105e:	d011      	beq.n	8001084 <HAL_RCC_OscConfig+0x2cc>
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <HAL_RCC_OscConfig+0x2bc>)
 8001062:	6a1a      	ldr	r2, [r3, #32]
 8001064:	f022 0201 	bic.w	r2, r2, #1
 8001068:	621a      	str	r2, [r3, #32]
 800106a:	6a1a      	ldr	r2, [r3, #32]
 800106c:	f022 0204 	bic.w	r2, r2, #4
 8001070:	621a      	str	r2, [r3, #32]
 8001072:	e7e0      	b.n	8001036 <HAL_RCC_OscConfig+0x27e>
 8001074:	40021000 	.word	0x40021000
 8001078:	42420000 	.word	0x42420000
 800107c:	42420480 	.word	0x42420480
 8001080:	40007000 	.word	0x40007000
 8001084:	4b41      	ldr	r3, [pc, #260]	; (800118c <HAL_RCC_OscConfig+0x3d4>)
 8001086:	6a1a      	ldr	r2, [r3, #32]
 8001088:	f042 0204 	orr.w	r2, r2, #4
 800108c:	621a      	str	r2, [r3, #32]
 800108e:	6a1a      	ldr	r2, [r3, #32]
 8001090:	f042 0201 	orr.w	r2, r2, #1
 8001094:	621a      	str	r2, [r3, #32]
 8001096:	e7ce      	b.n	8001036 <HAL_RCC_OscConfig+0x27e>
      tickstart = HAL_GetTick();
 8001098:	f7ff f888 	bl	80001ac <HAL_GetTick>
 800109c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800109e:	4b3b      	ldr	r3, [pc, #236]	; (800118c <HAL_RCC_OscConfig+0x3d4>)
 80010a0:	6a1b      	ldr	r3, [r3, #32]
 80010a2:	f013 0f02 	tst.w	r3, #2
 80010a6:	d008      	beq.n	80010ba <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a8:	f7ff f880 	bl	80001ac <HAL_GetTick>
 80010ac:	1b80      	subs	r0, r0, r6
 80010ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80010b2:	4298      	cmp	r0, r3
 80010b4:	d9f3      	bls.n	800109e <HAL_RCC_OscConfig+0x2e6>
          return HAL_TIMEOUT;
 80010b6:	2003      	movs	r0, #3
 80010b8:	e063      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 80010ba:	b9e5      	cbnz	r5, 80010f6 <HAL_RCC_OscConfig+0x33e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010bc:	69e3      	ldr	r3, [r4, #28]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d05e      	beq.n	8001180 <HAL_RCC_OscConfig+0x3c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010c2:	4a32      	ldr	r2, [pc, #200]	; (800118c <HAL_RCC_OscConfig+0x3d4>)
 80010c4:	6852      	ldr	r2, [r2, #4]
 80010c6:	f002 020c 	and.w	r2, r2, #12
 80010ca:	2a08      	cmp	r2, #8
 80010cc:	d05b      	beq.n	8001186 <HAL_RCC_OscConfig+0x3ce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d017      	beq.n	8001102 <HAL_RCC_OscConfig+0x34a>
        __HAL_RCC_PLL_DISABLE();
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_RCC_OscConfig+0x3d8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010d8:	f7ff f868 	bl	80001ac <HAL_GetTick>
 80010dc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010de:	4b2b      	ldr	r3, [pc, #172]	; (800118c <HAL_RCC_OscConfig+0x3d4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010e6:	d047      	beq.n	8001178 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010e8:	f7ff f860 	bl	80001ac <HAL_GetTick>
 80010ec:	1b00      	subs	r0, r0, r4
 80010ee:	2802      	cmp	r0, #2
 80010f0:	d9f5      	bls.n	80010de <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 80010f2:	2003      	movs	r0, #3
 80010f4:	e045      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010f6:	4a25      	ldr	r2, [pc, #148]	; (800118c <HAL_RCC_OscConfig+0x3d4>)
 80010f8:	69d3      	ldr	r3, [r2, #28]
 80010fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010fe:	61d3      	str	r3, [r2, #28]
 8001100:	e7dc      	b.n	80010bc <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_DISABLE();
 8001102:	4b23      	ldr	r3, [pc, #140]	; (8001190 <HAL_RCC_OscConfig+0x3d8>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001108:	f7ff f850 	bl	80001ac <HAL_GetTick>
 800110c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <HAL_RCC_OscConfig+0x3d4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001116:	d006      	beq.n	8001126 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001118:	f7ff f848 	bl	80001ac <HAL_GetTick>
 800111c:	1b40      	subs	r0, r0, r5
 800111e:	2802      	cmp	r0, #2
 8001120:	d9f5      	bls.n	800110e <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8001122:	2003      	movs	r0, #3
 8001124:	e02d      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001126:	6a23      	ldr	r3, [r4, #32]
 8001128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112c:	d01a      	beq.n	8001164 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800112e:	4917      	ldr	r1, [pc, #92]	; (800118c <HAL_RCC_OscConfig+0x3d4>)
 8001130:	684b      	ldr	r3, [r1, #4]
 8001132:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001136:	6a22      	ldr	r2, [r4, #32]
 8001138:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800113a:	4302      	orrs	r2, r0
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <HAL_RCC_OscConfig+0x3d8>)
 8001142:	2201      	movs	r2, #1
 8001144:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001146:	f7ff f831 	bl	80001ac <HAL_GetTick>
 800114a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_RCC_OscConfig+0x3d4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001154:	d10e      	bne.n	8001174 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001156:	f7ff f829 	bl	80001ac <HAL_GetTick>
 800115a:	1b00      	subs	r0, r0, r4
 800115c:	2802      	cmp	r0, #2
 800115e:	d9f5      	bls.n	800114c <HAL_RCC_OscConfig+0x394>
            return HAL_TIMEOUT;
 8001160:	2003      	movs	r0, #3
 8001162:	e00e      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001164:	4a09      	ldr	r2, [pc, #36]	; (800118c <HAL_RCC_OscConfig+0x3d4>)
 8001166:	6853      	ldr	r3, [r2, #4]
 8001168:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800116c:	68a1      	ldr	r1, [r4, #8]
 800116e:	430b      	orrs	r3, r1
 8001170:	6053      	str	r3, [r2, #4]
 8001172:	e7dc      	b.n	800112e <HAL_RCC_OscConfig+0x376>
  return HAL_OK;
 8001174:	2000      	movs	r0, #0
 8001176:	e004      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
 8001178:	2000      	movs	r0, #0
 800117a:	e002      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
        return HAL_ERROR;
 800117c:	2001      	movs	r0, #1
 800117e:	e000      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
  return HAL_OK;
 8001180:	2000      	movs	r0, #0
}
 8001182:	b002      	add	sp, #8
 8001184:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001186:	2001      	movs	r0, #1
 8001188:	e7fb      	b.n	8001182 <HAL_RCC_OscConfig+0x3ca>
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	42420060 	.word	0x42420060

08001194 <HAL_RCC_GetSysClockFreq>:
{
 8001194:	b410      	push	{r4}
 8001196:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001198:	4c16      	ldr	r4, [pc, #88]	; (80011f4 <HAL_RCC_GetSysClockFreq+0x60>)
 800119a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800119e:	f10d 0c18 	add.w	ip, sp, #24
 80011a2:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011a6:	8a23      	ldrh	r3, [r4, #16]
 80011a8:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_RCC_GetSysClockFreq+0x64>)
 80011ae:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80011b0:	f003 020c 	and.w	r2, r3, #12
 80011b4:	2a08      	cmp	r2, #8
 80011b6:	d11a      	bne.n	80011ee <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011b8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80011bc:	4462      	add	r2, ip
 80011be:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80011c6:	d105      	bne.n	80011d4 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_RCC_GetSysClockFreq+0x68>)
 80011ca:	fb03 f000 	mul.w	r0, r3, r0
}
 80011ce:	b007      	add	sp, #28
 80011d0:	bc10      	pop	{r4}
 80011d2:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_RCC_GetSysClockFreq+0x64>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80011dc:	4463      	add	r3, ip
 80011de:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <HAL_RCC_GetSysClockFreq+0x6c>)
 80011e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80011e8:	fb00 f003 	mul.w	r0, r0, r3
 80011ec:	e7ef      	b.n	80011ce <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 80011ee:	4804      	ldr	r0, [pc, #16]	; (8001200 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80011f0:	e7ed      	b.n	80011ce <HAL_RCC_GetSysClockFreq+0x3a>
 80011f2:	bf00      	nop
 80011f4:	0800317c 	.word	0x0800317c
 80011f8:	40021000 	.word	0x40021000
 80011fc:	003d0900 	.word	0x003d0900
 8001200:	007a1200 	.word	0x007a1200

08001204 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001204:	4b59      	ldr	r3, [pc, #356]	; (800136c <HAL_RCC_ClockConfig+0x168>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	428b      	cmp	r3, r1
 800120e:	d20c      	bcs.n	800122a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001210:	4a56      	ldr	r2, [pc, #344]	; (800136c <HAL_RCC_ClockConfig+0x168>)
 8001212:	6813      	ldr	r3, [r2, #0]
 8001214:	f023 0307 	bic.w	r3, r3, #7
 8001218:	430b      	orrs	r3, r1
 800121a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800121c:	6813      	ldr	r3, [r2, #0]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	428b      	cmp	r3, r1
 8001224:	d001      	beq.n	800122a <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001226:	2001      	movs	r0, #1
}
 8001228:	4770      	bx	lr
{
 800122a:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800122c:	6803      	ldr	r3, [r0, #0]
 800122e:	f013 0f02 	tst.w	r3, #2
 8001232:	d006      	beq.n	8001242 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001234:	4a4e      	ldr	r2, [pc, #312]	; (8001370 <HAL_RCC_ClockConfig+0x16c>)
 8001236:	6853      	ldr	r3, [r2, #4]
 8001238:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800123c:	6884      	ldr	r4, [r0, #8]
 800123e:	4323      	orrs	r3, r4
 8001240:	6053      	str	r3, [r2, #4]
 8001242:	460c      	mov	r4, r1
 8001244:	4605      	mov	r5, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001246:	6803      	ldr	r3, [r0, #0]
 8001248:	f013 0f01 	tst.w	r3, #1
 800124c:	d052      	beq.n	80012f4 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800124e:	6843      	ldr	r3, [r0, #4]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d023      	beq.n	800129c <HAL_RCC_ClockConfig+0x98>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001254:	2b02      	cmp	r3, #2
 8001256:	d028      	beq.n	80012aa <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001258:	4a45      	ldr	r2, [pc, #276]	; (8001370 <HAL_RCC_ClockConfig+0x16c>)
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	f012 0f02 	tst.w	r2, #2
 8001260:	f000 8082 	beq.w	8001368 <HAL_RCC_ClockConfig+0x164>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001264:	4942      	ldr	r1, [pc, #264]	; (8001370 <HAL_RCC_ClockConfig+0x16c>)
 8001266:	684a      	ldr	r2, [r1, #4]
 8001268:	f022 0203 	bic.w	r2, r2, #3
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001270:	f7fe ff9c 	bl	80001ac <HAL_GetTick>
 8001274:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001276:	686b      	ldr	r3, [r5, #4]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d01d      	beq.n	80012b8 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800127c:	2b02      	cmp	r3, #2
 800127e:	d02a      	beq.n	80012d6 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001280:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <HAL_RCC_ClockConfig+0x16c>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f013 0f0c 	tst.w	r3, #12
 8001288:	d034      	beq.n	80012f4 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800128a:	f7fe ff8f 	bl	80001ac <HAL_GetTick>
 800128e:	1b80      	subs	r0, r0, r6
 8001290:	f241 3388 	movw	r3, #5000	; 0x1388
 8001294:	4298      	cmp	r0, r3
 8001296:	d9f3      	bls.n	8001280 <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 8001298:	2003      	movs	r0, #3
 800129a:	e064      	b.n	8001366 <HAL_RCC_ClockConfig+0x162>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129c:	4a34      	ldr	r2, [pc, #208]	; (8001370 <HAL_RCC_ClockConfig+0x16c>)
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80012a4:	d1de      	bne.n	8001264 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 80012a6:	2001      	movs	r0, #1
 80012a8:	e05d      	b.n	8001366 <HAL_RCC_ClockConfig+0x162>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012aa:	4a31      	ldr	r2, [pc, #196]	; (8001370 <HAL_RCC_ClockConfig+0x16c>)
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80012b2:	d1d7      	bne.n	8001264 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 80012b4:	2001      	movs	r0, #1
 80012b6:	e056      	b.n	8001366 <HAL_RCC_ClockConfig+0x162>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012b8:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <HAL_RCC_ClockConfig+0x16c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d017      	beq.n	80012f4 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c4:	f7fe ff72 	bl	80001ac <HAL_GetTick>
 80012c8:	1b80      	subs	r0, r0, r6
 80012ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80012ce:	4298      	cmp	r0, r3
 80012d0:	d9f2      	bls.n	80012b8 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 80012d2:	2003      	movs	r0, #3
 80012d4:	e047      	b.n	8001366 <HAL_RCC_ClockConfig+0x162>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <HAL_RCC_ClockConfig+0x16c>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d008      	beq.n	80012f4 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e2:	f7fe ff63 	bl	80001ac <HAL_GetTick>
 80012e6:	1b80      	subs	r0, r0, r6
 80012e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80012ec:	4298      	cmp	r0, r3
 80012ee:	d9f2      	bls.n	80012d6 <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 80012f0:	2003      	movs	r0, #3
 80012f2:	e038      	b.n	8001366 <HAL_RCC_ClockConfig+0x162>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HAL_RCC_ClockConfig+0x168>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	42a3      	cmp	r3, r4
 80012fe:	d90c      	bls.n	800131a <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001300:	4a1a      	ldr	r2, [pc, #104]	; (800136c <HAL_RCC_ClockConfig+0x168>)
 8001302:	6813      	ldr	r3, [r2, #0]
 8001304:	f023 0307 	bic.w	r3, r3, #7
 8001308:	4323      	orrs	r3, r4
 800130a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800130c:	6813      	ldr	r3, [r2, #0]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	42a3      	cmp	r3, r4
 8001314:	d001      	beq.n	800131a <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 8001316:	2001      	movs	r0, #1
 8001318:	e025      	b.n	8001366 <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131a:	682b      	ldr	r3, [r5, #0]
 800131c:	f013 0f04 	tst.w	r3, #4
 8001320:	d006      	beq.n	8001330 <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001322:	4a13      	ldr	r2, [pc, #76]	; (8001370 <HAL_RCC_ClockConfig+0x16c>)
 8001324:	6853      	ldr	r3, [r2, #4]
 8001326:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800132a:	68e9      	ldr	r1, [r5, #12]
 800132c:	430b      	orrs	r3, r1
 800132e:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	f013 0f08 	tst.w	r3, #8
 8001336:	d007      	beq.n	8001348 <HAL_RCC_ClockConfig+0x144>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <HAL_RCC_ClockConfig+0x16c>)
 800133a:	6853      	ldr	r3, [r2, #4]
 800133c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001340:	6929      	ldr	r1, [r5, #16]
 8001342:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001346:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001348:	f7ff ff24 	bl	8001194 <HAL_RCC_GetSysClockFreq>
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_RCC_ClockConfig+0x16c>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_RCC_ClockConfig+0x170>)
 8001356:	5cd3      	ldrb	r3, [r2, r3]
 8001358:	40d8      	lsrs	r0, r3
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <HAL_RCC_ClockConfig+0x174>)
 800135c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800135e:	2000      	movs	r0, #0
 8001360:	f7fe fef4 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001364:	2000      	movs	r0, #0
}
 8001366:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001368:	2001      	movs	r0, #1
 800136a:	e7fc      	b.n	8001366 <HAL_RCC_ClockConfig+0x162>
 800136c:	40022000 	.word	0x40022000
 8001370:	40021000 	.word	0x40021000
 8001374:	080031a0 	.word	0x080031a0
 8001378:	200000b4 	.word	0x200000b4

0800137c <HAL_RCC_GetHCLKFreq>:
}
 800137c:	4b01      	ldr	r3, [pc, #4]	; (8001384 <HAL_RCC_GetHCLKFreq+0x8>)
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200000b4 	.word	0x200000b4

08001388 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800138e:	6803      	ldr	r3, [r0, #0]
 8001390:	f013 0f01 	tst.w	r3, #1
 8001394:	d034      	beq.n	8001400 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001396:	4b3e      	ldr	r3, [pc, #248]	; (8001490 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800139e:	d148      	bne.n	8001432 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80013a0:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80013a2:	69da      	ldr	r2, [r3, #28]
 80013a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013a8:	61da      	str	r2, [r3, #28]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013b4:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b6:	4b37      	ldr	r3, [pc, #220]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80013be:	d03a      	beq.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80013c4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80013c8:	d011      	beq.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0x66>
 80013ca:	6862      	ldr	r2, [r4, #4]
 80013cc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d00c      	beq.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80013d4:	4a2e      	ldr	r2, [pc, #184]	; (8001490 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80013d6:	6a13      	ldr	r3, [r2, #32]
 80013d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80013dc:	492e      	ldr	r1, [pc, #184]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80013de:	2601      	movs	r6, #1
 80013e0:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80013e2:	2600      	movs	r6, #0
 80013e4:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80013e6:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80013e8:	f013 0f01 	tst.w	r3, #1
 80013ec:	d137      	bne.n	800145e <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80013ee:	4a28      	ldr	r2, [pc, #160]	; (8001490 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80013f0:	6a13      	ldr	r3, [r2, #32]
 80013f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013f6:	6861      	ldr	r1, [r4, #4]
 80013f8:	430b      	orrs	r3, r1
 80013fa:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013fc:	2d00      	cmp	r5, #0
 80013fe:	d13f      	bne.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	f013 0f02 	tst.w	r3, #2
 8001406:	d006      	beq.n	8001416 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001408:	4a21      	ldr	r2, [pc, #132]	; (8001490 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800140a:	6853      	ldr	r3, [r2, #4]
 800140c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001410:	68a1      	ldr	r1, [r4, #8]
 8001412:	430b      	orrs	r3, r1
 8001414:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	f013 0f10 	tst.w	r3, #16
 800141c:	d035      	beq.n	800148a <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800141e:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001420:	6853      	ldr	r3, [r2, #4]
 8001422:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001426:	68e1      	ldr	r1, [r4, #12]
 8001428:	430b      	orrs	r3, r1
 800142a:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800142c:	2000      	movs	r0, #0
}
 800142e:	b002      	add	sp, #8
 8001430:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001432:	2500      	movs	r5, #0
 8001434:	e7bf      	b.n	80013b6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001436:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001438:	6813      	ldr	r3, [r2, #0]
 800143a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001440:	f7fe feb4 	bl	80001ac <HAL_GetTick>
 8001444:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800144e:	d1b7      	bne.n	80013c0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001450:	f7fe feac 	bl	80001ac <HAL_GetTick>
 8001454:	1b80      	subs	r0, r0, r6
 8001456:	2864      	cmp	r0, #100	; 0x64
 8001458:	d9f5      	bls.n	8001446 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 800145a:	2003      	movs	r0, #3
 800145c:	e7e7      	b.n	800142e <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 800145e:	f7fe fea5 	bl	80001ac <HAL_GetTick>
 8001462:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	f013 0f02 	tst.w	r3, #2
 800146c:	d1bf      	bne.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800146e:	f7fe fe9d 	bl	80001ac <HAL_GetTick>
 8001472:	1b80      	subs	r0, r0, r6
 8001474:	f241 3388 	movw	r3, #5000	; 0x1388
 8001478:	4298      	cmp	r0, r3
 800147a:	d9f3      	bls.n	8001464 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 800147c:	2003      	movs	r0, #3
 800147e:	e7d6      	b.n	800142e <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001480:	69d3      	ldr	r3, [r2, #28]
 8001482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001486:	61d3      	str	r3, [r2, #28]
 8001488:	e7ba      	b.n	8001400 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 800148a:	2000      	movs	r0, #0
 800148c:	e7cf      	b.n	800142e <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000
 8001494:	40007000 	.word	0x40007000
 8001498:	42420440 	.word	0x42420440

0800149c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800149c:	b084      	sub	sp, #16
 800149e:	a801      	add	r0, sp, #4
 80014a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80014a4:	2000      	movs	r0, #0
 80014a6:	b004      	add	sp, #16
 80014a8:	4770      	bx	lr

080014aa <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80014aa:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80014ae:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80014b2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80014b6:	2000      	movs	r0, #0
 80014b8:	4770      	bx	lr

080014ba <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80014ba:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80014be:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 80014c2:	045b      	lsls	r3, r3, #17
 80014c4:	0c5b      	lsrs	r3, r3, #17
 80014c6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80014ca:	2000      	movs	r0, #0
 80014cc:	4770      	bx	lr

080014ce <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80014ce:	2000      	movs	r0, #0
 80014d0:	4770      	bx	lr

080014d2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80014d2:	b084      	sub	sp, #16
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	ac05      	add	r4, sp, #20
 80014d8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80014dc:	2301      	movs	r3, #1
 80014de:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80014e2:	2400      	movs	r4, #0
 80014e4:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80014e8:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80014ec:	f8a0 4050 	strh.w	r4, [r0, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 80014f0:	f7ff ffdb 	bl	80014aa <USB_EnableGlobalInt>
    
  return HAL_OK;
}
 80014f4:	4620      	mov	r0, r4
 80014f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014fa:	b004      	add	sp, #16
 80014fc:	4770      	bx	lr

080014fe <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80014fe:	b410      	push	{r4}
  /* initialize Endpoint */
  switch (ep->type)
 8001500:	78cb      	ldrb	r3, [r1, #3]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d80f      	bhi.n	8001526 <USB_ActivateEndpoint+0x28>
 8001506:	e8df f003 	tbb	[pc, r3]
 800150a:	6d02      	.short	0x6d02
 800150c:	6054      	.short	0x6054
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 800150e:	780a      	ldrb	r2, [r1, #0]
 8001510:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001514:	b29b      	uxth	r3, r3
 8001516:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800151a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800151e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001522:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001526:	780a      	ldrb	r2, [r1, #0]
 8001528:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800152c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001530:	051b      	lsls	r3, r3, #20
 8001532:	0d1b      	lsrs	r3, r3, #20
 8001534:	4313      	orrs	r3, r2
 8001536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800153e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8001542:	7a8b      	ldrb	r3, [r1, #10]
 8001544:	2b00      	cmp	r3, #0
 8001546:	f040 80af 	bne.w	80016a8 <USB_ActivateEndpoint+0x1aa>
  {
    if (ep->is_in)
 800154a:	784b      	ldrb	r3, [r1, #1]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d056      	beq.n	80015fe <USB_ActivateEndpoint+0x100>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001550:	888a      	ldrh	r2, [r1, #4]
 8001552:	0852      	lsrs	r2, r2, #1
 8001554:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001558:	780c      	ldrb	r4, [r1, #0]
 800155a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800155e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001562:	0052      	lsls	r2, r2, #1
 8001564:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001568:	780a      	ldrb	r2, [r1, #0]
 800156a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800156e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001572:	d00b      	beq.n	800158c <USB_ActivateEndpoint+0x8e>
 8001574:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800157c:	051b      	lsls	r3, r3, #20
 800157e:	0d1b      	lsrs	r3, r3, #20
 8001580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001584:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001588:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 800158c:	780a      	ldrb	r2, [r1, #0]
 800158e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001592:	b29b      	uxth	r3, r3
 8001594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800159c:	f083 0320 	eor.w	r3, r3, #32
 80015a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80015ac:	2000      	movs	r0, #0
 80015ae:	bc10      	pop	{r4}
 80015b0:	4770      	bx	lr
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 80015b2:	780a      	ldrb	r2, [r1, #0]
 80015b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80015be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 80015c8:	e7ad      	b.n	8001526 <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 80015ca:	780a      	ldrb	r2, [r1, #0]
 80015cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80015d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015da:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80015de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 80015e2:	e7a0      	b.n	8001526 <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80015e4:	780a      	ldrb	r2, [r1, #0]
 80015e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80015f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 80015fc:	e793      	b.n	8001526 <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80015fe:	888a      	ldrh	r2, [r1, #4]
 8001600:	0852      	lsrs	r2, r2, #1
 8001602:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001606:	780c      	ldrb	r4, [r1, #0]
 8001608:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800160c:	3304      	adds	r3, #4
 800160e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001612:	0052      	lsls	r2, r2, #1
 8001614:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001618:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800161c:	780a      	ldrb	r2, [r1, #0]
 800161e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001622:	3306      	adds	r3, #6
 8001624:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001628:	690c      	ldr	r4, [r1, #16]
 800162a:	2c3e      	cmp	r4, #62	; 0x3e
 800162c:	d930      	bls.n	8001690 <USB_ActivateEndpoint+0x192>
 800162e:	f3c4 124f 	ubfx	r2, r4, #5, #16
 8001632:	f014 0f1f 	tst.w	r4, #31
 8001636:	d101      	bne.n	800163c <USB_ActivateEndpoint+0x13e>
 8001638:	3a01      	subs	r2, #1
 800163a:	b292      	uxth	r2, r2
 800163c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8001640:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001644:	b292      	uxth	r2, r2
 8001646:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800164a:	780a      	ldrb	r2, [r1, #0]
 800164c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001650:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001654:	d00b      	beq.n	800166e <USB_ActivateEndpoint+0x170>
 8001656:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800165a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800165e:	051b      	lsls	r3, r3, #20
 8001660:	0d1b      	lsrs	r3, r3, #20
 8001662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800166a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800166e:	780a      	ldrb	r2, [r1, #0]
 8001670:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001674:	b29b      	uxth	r3, r3
 8001676:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800167a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800167e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800168a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800168e:	e78d      	b.n	80015ac <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001690:	f3c4 024f 	ubfx	r2, r4, #1, #16
 8001694:	f014 0f01 	tst.w	r4, #1
 8001698:	d001      	beq.n	800169e <USB_ActivateEndpoint+0x1a0>
 800169a:	3201      	adds	r2, #1
 800169c:	b292      	uxth	r2, r2
 800169e:	0292      	lsls	r2, r2, #10
 80016a0:	b292      	uxth	r2, r2
 80016a2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80016a6:	e7d0      	b.n	800164a <USB_ActivateEndpoint+0x14c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80016a8:	780a      	ldrb	r2, [r1, #0]
 80016aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016ae:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80016b2:	051b      	lsls	r3, r3, #20
 80016b4:	0d1b      	lsrs	r3, r3, #20
 80016b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80016ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016be:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80016c2:	88ca      	ldrh	r2, [r1, #6]
 80016c4:	0852      	lsrs	r2, r2, #1
 80016c6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016ca:	780c      	ldrb	r4, [r1, #0]
 80016cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80016d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80016d4:	0052      	lsls	r2, r2, #1
 80016d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80016da:	890a      	ldrh	r2, [r1, #8]
 80016dc:	0852      	lsrs	r2, r2, #1
 80016de:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016e2:	780c      	ldrb	r4, [r1, #0]
 80016e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80016e8:	3304      	adds	r3, #4
 80016ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80016ee:	0052      	lsls	r2, r2, #1
 80016f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    if (ep->is_in==0)
 80016f4:	784b      	ldrb	r3, [r1, #1]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d14b      	bne.n	8001792 <USB_ActivateEndpoint+0x294>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80016fa:	780a      	ldrb	r2, [r1, #0]
 80016fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001700:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001704:	d00b      	beq.n	800171e <USB_ActivateEndpoint+0x220>
 8001706:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800170a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800170e:	051b      	lsls	r3, r3, #20
 8001710:	0d1b      	lsrs	r3, r3, #20
 8001712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800171e:	780a      	ldrb	r2, [r1, #0]
 8001720:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001724:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001728:	d00b      	beq.n	8001742 <USB_ActivateEndpoint+0x244>
 800172a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800172e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001732:	051b      	lsls	r3, r3, #20
 8001734:	0d1b      	lsrs	r3, r3, #20
 8001736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800173a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800173e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001742:	780a      	ldrb	r2, [r1, #0]
 8001744:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800174c:	051b      	lsls	r3, r3, #20
 800174e:	0d1b      	lsrs	r3, r3, #20
 8001750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001754:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001758:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800175c:	780a      	ldrb	r2, [r1, #0]
 800175e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001762:	b29b      	uxth	r3, r3
 8001764:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800176c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001770:	f248 0480 	movw	r4, #32896	; 0x8080
 8001774:	4323      	orrs	r3, r4
 8001776:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800177a:	780a      	ldrb	r2, [r1, #0]
 800177c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001780:	b29b      	uxth	r3, r3
 8001782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800178a:	4323      	orrs	r3, r4
 800178c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001790:	e70c      	b.n	80015ac <USB_ActivateEndpoint+0xae>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001792:	780a      	ldrb	r2, [r1, #0]
 8001794:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001798:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800179c:	d00b      	beq.n	80017b6 <USB_ActivateEndpoint+0x2b8>
 800179e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017a6:	051b      	lsls	r3, r3, #20
 80017a8:	0d1b      	lsrs	r3, r3, #20
 80017aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80017b6:	780a      	ldrb	r2, [r1, #0]
 80017b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80017c0:	d00b      	beq.n	80017da <USB_ActivateEndpoint+0x2dc>
 80017c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017ca:	051b      	lsls	r3, r3, #20
 80017cc:	0d1b      	lsrs	r3, r3, #20
 80017ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80017da:	780a      	ldrb	r2, [r1, #0]
 80017dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017e4:	051b      	lsls	r3, r3, #20
 80017e6:	0d1b      	lsrs	r3, r3, #20
 80017e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80017f4:	780b      	ldrb	r3, [r1, #0]
 80017f6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017fa:	b292      	uxth	r2, r2
 80017fc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001804:	f248 0480 	movw	r4, #32896	; 0x8080
 8001808:	4322      	orrs	r2, r4
 800180a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800180e:	780a      	ldrb	r2, [r1, #0]
 8001810:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001814:	b29b      	uxth	r3, r3
 8001816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800181a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800181e:	4323      	orrs	r3, r4
 8001820:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001824:	e6c2      	b.n	80015ac <USB_ActivateEndpoint+0xae>

08001826 <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0) 
 8001826:	7a8b      	ldrb	r3, [r1, #10]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d144      	bne.n	80018b6 <USB_DeactivateEndpoint+0x90>
  {
    if (ep->is_in)
 800182c:	784b      	ldrb	r3, [r1, #1]
 800182e:	b30b      	cbz	r3, 8001874 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001830:	780a      	ldrb	r2, [r1, #0]
 8001832:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001836:	f013 0f40 	tst.w	r3, #64	; 0x40
 800183a:	d00b      	beq.n	8001854 <USB_DeactivateEndpoint+0x2e>
 800183c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001840:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001844:	051b      	lsls	r3, r3, #20
 8001846:	0d1b      	lsrs	r3, r3, #20
 8001848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800184c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001850:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8001854:	780a      	ldrb	r2, [r1, #0]
 8001856:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800185a:	b29b      	uxth	r3, r3
 800185c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001870:	2000      	movs	r0, #0
 8001872:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001874:	780a      	ldrb	r2, [r1, #0]
 8001876:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800187a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800187e:	d00b      	beq.n	8001898 <USB_DeactivateEndpoint+0x72>
 8001880:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001884:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001888:	051b      	lsls	r3, r3, #20
 800188a:	0d1b      	lsrs	r3, r3, #20
 800188c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001894:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001898:	780a      	ldrb	r2, [r1, #0]
 800189a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80018b4:	e7dc      	b.n	8001870 <USB_DeactivateEndpoint+0x4a>
{
 80018b6:	b410      	push	{r4}
    if (ep->is_in==0)
 80018b8:	784b      	ldrb	r3, [r1, #1]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d14b      	bne.n	8001956 <USB_DeactivateEndpoint+0x130>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80018be:	780a      	ldrb	r2, [r1, #0]
 80018c0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018c4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80018c8:	d00b      	beq.n	80018e2 <USB_DeactivateEndpoint+0xbc>
 80018ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018d2:	051b      	lsls	r3, r3, #20
 80018d4:	0d1b      	lsrs	r3, r3, #20
 80018d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80018e2:	780a      	ldrb	r2, [r1, #0]
 80018e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80018ec:	d00b      	beq.n	8001906 <USB_DeactivateEndpoint+0xe0>
 80018ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018f6:	051b      	lsls	r3, r3, #20
 80018f8:	0d1b      	lsrs	r3, r3, #20
 80018fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001902:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001906:	780a      	ldrb	r2, [r1, #0]
 8001908:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800190c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001910:	051b      	lsls	r3, r3, #20
 8001912:	0d1b      	lsrs	r3, r3, #20
 8001914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001918:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800191c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001920:	780b      	ldrb	r3, [r1, #0]
 8001922:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001926:	b292      	uxth	r2, r2
 8001928:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800192c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001930:	f248 0480 	movw	r4, #32896	; 0x8080
 8001934:	4322      	orrs	r2, r4
 8001936:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800193a:	780a      	ldrb	r2, [r1, #0]
 800193c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001940:	b29b      	uxth	r3, r3
 8001942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800194a:	4323      	orrs	r3, r4
 800194c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8001950:	2000      	movs	r0, #0
 8001952:	bc10      	pop	{r4}
 8001954:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001956:	780a      	ldrb	r2, [r1, #0]
 8001958:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800195c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001960:	d00b      	beq.n	800197a <USB_DeactivateEndpoint+0x154>
 8001962:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800196a:	051b      	lsls	r3, r3, #20
 800196c:	0d1b      	lsrs	r3, r3, #20
 800196e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001976:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800197a:	780a      	ldrb	r2, [r1, #0]
 800197c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001980:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001984:	d00b      	beq.n	800199e <USB_DeactivateEndpoint+0x178>
 8001986:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800198a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800198e:	051b      	lsls	r3, r3, #20
 8001990:	0d1b      	lsrs	r3, r3, #20
 8001992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001996:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800199a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800199e:	780a      	ldrb	r2, [r1, #0]
 80019a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019a8:	051b      	lsls	r3, r3, #20
 80019aa:	0d1b      	lsrs	r3, r3, #20
 80019ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80019b8:	780b      	ldrb	r3, [r1, #0]
 80019ba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80019be:	b292      	uxth	r2, r2
 80019c0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80019c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019c8:	f248 0480 	movw	r4, #32896	; 0x8080
 80019cc:	4322      	orrs	r2, r4
 80019ce:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80019d2:	780a      	ldrb	r2, [r1, #0]
 80019d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e2:	4323      	orrs	r3, r4
 80019e4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80019e8:	e7b2      	b.n	8001950 <USB_DeactivateEndpoint+0x12a>

080019ea <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 80019ea:	780a      	ldrb	r2, [r1, #0]
 80019ec:	b18a      	cbz	r2, 8001a12 <USB_EPSetStall+0x28>
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
  }
  else
  {
    if (ep->is_in)
 80019ee:	784b      	ldrb	r3, [r1, #1]
 80019f0:	bb13      	cbnz	r3, 8001a38 <USB_EPSetStall+0x4e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 80019f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a0c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001a10:	e010      	b.n	8001a34 <USB_EPSetStall+0x4a>
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001a12:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a24:	f083 0310 	eor.w	r3, r3, #16
 8001a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a30:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 8001a34:	2000      	movs	r0, #0
 8001a36:	4770      	bx	lr
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001a38:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a46:	f083 0310 	eor.w	r3, r3, #16
 8001a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a52:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001a56:	e7ed      	b.n	8001a34 <USB_EPSetStall+0x4a>

08001a58 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8001a58:	784b      	ldrb	r3, [r1, #1]
 8001a5a:	b31b      	cbz	r3, 8001aa4 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001a5c:	780a      	ldrb	r2, [r1, #0]
 8001a5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001a66:	d00b      	beq.n	8001a80 <USB_EPClearStall+0x28>
 8001a68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a70:	051b      	lsls	r3, r3, #20
 8001a72:	0d1b      	lsrs	r3, r3, #20
 8001a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a7c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001a80:	780a      	ldrb	r2, [r1, #0]
 8001a82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a90:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
  }
  return HAL_OK;
}
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001aa4:	780a      	ldrb	r2, [r1, #0]
 8001aa6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001aaa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001aae:	d00b      	beq.n	8001ac8 <USB_EPClearStall+0x70>
 8001ab0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ab4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ab8:	051b      	lsls	r3, r3, #20
 8001aba:	0d1b      	lsrs	r3, r3, #20
 8001abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001ac8:	780a      	ldrb	r2, [r1, #0]
 8001aca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001ae8:	e7da      	b.n	8001aa0 <USB_EPClearStall+0x48>

08001aea <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001aea:	b911      	cbnz	r1, 8001af2 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001af2:	2000      	movs	r0, #0
 8001af4:	4770      	bx	lr

08001af6 <USB_DevConnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001af6:	2000      	movs	r0, #0
 8001af8:	4770      	bx	lr

08001afa <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001afa:	2000      	movs	r0, #0
 8001afc:	4770      	bx	lr

08001afe <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8001afe:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001b02:	4770      	bx	lr

08001b04 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001b04:	2000      	movs	r0, #0
 8001b06:	4770      	bx	lr

08001b08 <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001b08:	3301      	adds	r3, #1
 8001b0a:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001b0c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001b10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8001b14:	b163      	cbz	r3, 8001b30 <USB_WritePMA+0x28>
{
 8001b16:	b410      	push	{r4}
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8001b18:	780c      	ldrb	r4, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8001b1a:	7848      	ldrb	r0, [r1, #1]
 8001b1c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    *pdwVal++ = temp2;
 8001b20:	f822 4b04 	strh.w	r4, [r2], #4
    pdwVal++;
    pbUsrBuf++;
 8001b24:	3102      	adds	r1, #2
  for (index = nbytes; index != 0; index--)
 8001b26:	3b01      	subs	r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f5      	bne.n	8001b18 <USB_WritePMA+0x10>
  }
}
 8001b2c:	bc10      	pop	{r4}
 8001b2e:	4770      	bx	lr
 8001b30:	4770      	bx	lr

08001b32 <USB_EPStartXfer>:
{
 8001b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t len = ep->xfer_len;
 8001b34:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8001b36:	784d      	ldrb	r5, [r1, #1]
 8001b38:	2d01      	cmp	r5, #1
 8001b3a:	d034      	beq.n	8001ba6 <USB_EPStartXfer+0x74>
    if (ep->xfer_len > ep->maxpacket)
 8001b3c:	690b      	ldr	r3, [r1, #16]
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	f080 80ea 	bcs.w	8001d18 <USB_EPStartXfer+0x1e6>
      ep->xfer_len-=len; 
 8001b44:	1ad2      	subs	r2, r2, r3
 8001b46:	618a      	str	r2, [r1, #24]
    if (ep->doublebuffer == 0) 
 8001b48:	7a8a      	ldrb	r2, [r1, #10]
 8001b4a:	2a00      	cmp	r2, #0
 8001b4c:	f040 80f4 	bne.w	8001d38 <USB_EPStartXfer+0x206>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001b50:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001b54:	780c      	ldrb	r4, [r1, #0]
 8001b56:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001b5a:	3206      	adds	r2, #6
 8001b5c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001b60:	2b3e      	cmp	r3, #62	; 0x3e
 8001b62:	f240 80dd 	bls.w	8001d20 <USB_EPStartXfer+0x1ee>
 8001b66:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8001b6a:	f013 0f1f 	tst.w	r3, #31
 8001b6e:	d101      	bne.n	8001b74 <USB_EPStartXfer+0x42>
 8001b70:	3c01      	subs	r4, #1
 8001b72:	b2a4      	uxth	r4, r4
 8001b74:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8001b78:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8001b7c:	b2a4      	uxth	r4, r4
 8001b7e:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001b82:	780a      	ldrb	r2, [r1, #0]
 8001b84:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b92:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8001ba6:	690f      	ldr	r7, [r1, #16]
 8001ba8:	4297      	cmp	r7, r2
 8001baa:	d225      	bcs.n	8001bf8 <USB_EPStartXfer+0xc6>
      ep->xfer_len-=len; 
 8001bac:	1bd2      	subs	r2, r2, r7
 8001bae:	618a      	str	r2, [r1, #24]
 8001bb0:	460e      	mov	r6, r1
 8001bb2:	4604      	mov	r4, r0
    if (ep->doublebuffer == 0) 
 8001bb4:	7a8b      	ldrb	r3, [r1, #10]
 8001bb6:	b31b      	cbz	r3, 8001c00 <USB_EPStartXfer+0xce>
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001bb8:	780b      	ldrb	r3, [r1, #0]
 8001bba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001bbe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001bc2:	d069      	beq.n	8001c98 <USB_EPStartXfer+0x166>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001bc4:	2d00      	cmp	r5, #0
 8001bc6:	d137      	bne.n	8001c38 <USB_EPStartXfer+0x106>
 8001bc8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001bcc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001bd0:	3306      	adds	r3, #6
 8001bd2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001bd6:	2f3e      	cmp	r7, #62	; 0x3e
 8001bd8:	d922      	bls.n	8001c20 <USB_EPStartXfer+0xee>
 8001bda:	f3c7 124f 	ubfx	r2, r7, #5, #16
 8001bde:	f017 0f1f 	tst.w	r7, #31
 8001be2:	d101      	bne.n	8001be8 <USB_EPStartXfer+0xb6>
 8001be4:	3a01      	subs	r2, #1
 8001be6:	b292      	uxth	r2, r2
 8001be8:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8001bec:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001bf0:	b292      	uxth	r2, r2
 8001bf2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8001bf6:	e028      	b.n	8001c4a <USB_EPStartXfer+0x118>
      ep->xfer_len =0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8001bfc:	4617      	mov	r7, r2
 8001bfe:	e7d7      	b.n	8001bb0 <USB_EPStartXfer+0x7e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001c00:	b2bb      	uxth	r3, r7
 8001c02:	888a      	ldrh	r2, [r1, #4]
 8001c04:	6949      	ldr	r1, [r1, #20]
 8001c06:	f7ff ff7f 	bl	8001b08 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001c0a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8001c0e:	7832      	ldrb	r2, [r6, #0]
 8001c10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001c14:	3302      	adds	r3, #2
 8001c16:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001c1a:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
 8001c1e:	e02a      	b.n	8001c76 <USB_EPStartXfer+0x144>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001c20:	f3c7 024f 	ubfx	r2, r7, #1, #16
 8001c24:	f017 0f01 	tst.w	r7, #1
 8001c28:	d001      	beq.n	8001c2e <USB_EPStartXfer+0xfc>
 8001c2a:	3201      	adds	r2, #1
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	0292      	lsls	r2, r2, #10
 8001c30:	b292      	uxth	r2, r2
 8001c32:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8001c36:	e008      	b.n	8001c4a <USB_EPStartXfer+0x118>
 8001c38:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001c3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001c40:	3302      	adds	r3, #2
 8001c42:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001c46:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8001c4a:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001c4c:	b2bb      	uxth	r3, r7
 8001c4e:	6971      	ldr	r1, [r6, #20]
 8001c50:	4620      	mov	r0, r4
 8001c52:	f7ff ff59 	bl	8001b08 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001c56:	7873      	ldrb	r3, [r6, #1]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d14d      	bne.n	8001cf8 <USB_EPStartXfer+0x1c6>
 8001c5c:	7832      	ldrb	r2, [r6, #0]
 8001c5e:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c66:	051b      	lsls	r3, r3, #20
 8001c68:	0d1b      	lsrs	r3, r3, #20
 8001c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c72:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001c76:	7832      	ldrb	r2, [r6, #0]
 8001c78:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c86:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c92:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8001c96:	e784      	b.n	8001ba2 <USB_EPStartXfer+0x70>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001c98:	bb1d      	cbnz	r5, 8001ce2 <USB_EPStartXfer+0x1b0>
 8001c9a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001c9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001ca8:	2f3e      	cmp	r7, #62	; 0x3e
 8001caa:	d90e      	bls.n	8001cca <USB_EPStartXfer+0x198>
 8001cac:	f3c7 124f 	ubfx	r2, r7, #5, #16
 8001cb0:	f017 0f1f 	tst.w	r7, #31
 8001cb4:	d101      	bne.n	8001cba <USB_EPStartXfer+0x188>
 8001cb6:	3a01      	subs	r2, #1
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8001cbe:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001cc2:	b292      	uxth	r2, r2
 8001cc4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8001cc8:	e014      	b.n	8001cf4 <USB_EPStartXfer+0x1c2>
 8001cca:	f3c7 024f 	ubfx	r2, r7, #1, #16
 8001cce:	f017 0f01 	tst.w	r7, #1
 8001cd2:	d001      	beq.n	8001cd8 <USB_EPStartXfer+0x1a6>
 8001cd4:	3201      	adds	r2, #1
 8001cd6:	b292      	uxth	r2, r2
 8001cd8:	0292      	lsls	r2, r2, #10
 8001cda:	b292      	uxth	r2, r2
 8001cdc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8001ce0:	e008      	b.n	8001cf4 <USB_EPStartXfer+0x1c2>
 8001ce2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001ce6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001cea:	3302      	adds	r3, #2
 8001cec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001cf0:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr0;
 8001cf4:	88f2      	ldrh	r2, [r6, #6]
 8001cf6:	e7a9      	b.n	8001c4c <USB_EPStartXfer+0x11a>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d1bc      	bne.n	8001c76 <USB_EPStartXfer+0x144>
 8001cfc:	7832      	ldrb	r2, [r6, #0]
 8001cfe:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d06:	051b      	lsls	r3, r3, #20
 8001d08:	0d1b      	lsrs	r3, r3, #20
 8001d0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d12:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8001d16:	e7ae      	b.n	8001c76 <USB_EPStartXfer+0x144>
      ep->xfer_len =0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	e713      	b.n	8001b48 <USB_EPStartXfer+0x16>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001d20:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8001d24:	f013 0f01 	tst.w	r3, #1
 8001d28:	d001      	beq.n	8001d2e <USB_EPStartXfer+0x1fc>
 8001d2a:	3401      	adds	r4, #1
 8001d2c:	b2a4      	uxth	r4, r4
 8001d2e:	02a4      	lsls	r4, r4, #10
 8001d30:	b2a4      	uxth	r4, r4
 8001d32:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001d36:	e724      	b.n	8001b82 <USB_EPStartXfer+0x50>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001d38:	b9bd      	cbnz	r5, 8001d6a <USB_EPStartXfer+0x238>
 8001d3a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001d3e:	780c      	ldrb	r4, [r1, #0]
 8001d40:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001d44:	3202      	adds	r2, #2
 8001d46:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001d4a:	2b3e      	cmp	r3, #62	; 0x3e
 8001d4c:	d928      	bls.n	8001da0 <USB_EPStartXfer+0x26e>
 8001d4e:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8001d52:	f013 0f1f 	tst.w	r3, #31
 8001d56:	d101      	bne.n	8001d5c <USB_EPStartXfer+0x22a>
 8001d58:	3c01      	subs	r4, #1
 8001d5a:	b2a4      	uxth	r4, r4
 8001d5c:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8001d60:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8001d64:	b2a4      	uxth	r4, r4
 8001d66:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001d6a:	784a      	ldrb	r2, [r1, #1]
 8001d6c:	bb82      	cbnz	r2, 8001dd0 <USB_EPStartXfer+0x29e>
 8001d6e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001d72:	780c      	ldrb	r4, [r1, #0]
 8001d74:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001d78:	3206      	adds	r2, #6
 8001d7a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8001d80:	d91a      	bls.n	8001db8 <USB_EPStartXfer+0x286>
 8001d82:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8001d86:	f013 0f1f 	tst.w	r3, #31
 8001d8a:	d101      	bne.n	8001d90 <USB_EPStartXfer+0x25e>
 8001d8c:	3c01      	subs	r4, #1
 8001d8e:	b2a4      	uxth	r4, r4
 8001d90:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8001d94:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8001d98:	b2a4      	uxth	r4, r4
 8001d9a:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001d9e:	e6f0      	b.n	8001b82 <USB_EPStartXfer+0x50>
 8001da0:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8001da4:	f013 0f01 	tst.w	r3, #1
 8001da8:	d001      	beq.n	8001dae <USB_EPStartXfer+0x27c>
 8001daa:	3401      	adds	r4, #1
 8001dac:	b2a4      	uxth	r4, r4
 8001dae:	02a4      	lsls	r4, r4, #10
 8001db0:	b2a4      	uxth	r4, r4
 8001db2:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001db6:	e7d8      	b.n	8001d6a <USB_EPStartXfer+0x238>
 8001db8:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8001dbc:	f013 0f01 	tst.w	r3, #1
 8001dc0:	d001      	beq.n	8001dc6 <USB_EPStartXfer+0x294>
 8001dc2:	3401      	adds	r4, #1
 8001dc4:	b2a4      	uxth	r4, r4
 8001dc6:	02a4      	lsls	r4, r4, #10
 8001dc8:	b2a4      	uxth	r4, r4
 8001dca:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001dce:	e6d8      	b.n	8001b82 <USB_EPStartXfer+0x50>
 8001dd0:	2a01      	cmp	r2, #1
 8001dd2:	f47f aed6 	bne.w	8001b82 <USB_EPStartXfer+0x50>
 8001dd6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001dda:	780c      	ldrb	r4, [r1, #0]
 8001ddc:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001de0:	3202      	adds	r2, #2
 8001de2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001de6:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8001dea:	e6ca      	b.n	8001b82 <USB_EPStartXfer+0x50>

08001dec <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001dec:	3301      	adds	r3, #1
 8001dee:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001df0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001df4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8001df8:	e004      	b.n	8001e04 <USB_ReadPMA+0x18>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001dfa:	6810      	ldr	r0, [r2, #0]
 8001dfc:	f821 0b02 	strh.w	r0, [r1], #2
  for (index = nbytes; index != 0; index--)
 8001e00:	3b01      	subs	r3, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001e02:	3204      	adds	r2, #4
  for (index = nbytes; index != 0; index--)
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f8      	bne.n	8001dfa <USB_ReadPMA+0xe>
    pbUsrBuf++;
  }
}
 8001e08:	4770      	bx	lr
	...

08001e0c <USBD_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgDesc);
 8001e0c:	2322      	movs	r3, #34	; 0x22
 8001e0e:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgDesc;
}
 8001e10:	4800      	ldr	r0, [pc, #0]	; (8001e14 <USBD_HID_GetCfgDesc+0x8>)
 8001e12:	4770      	bx	lr
 8001e14:	20000078 	.word	0x20000078

08001e18 <USBD_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8001e18:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 8001e20:	4770      	bx	lr
	...

08001e24 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8001e24:	230a      	movs	r3, #10
 8001e26:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
}
 8001e28:	4800      	ldr	r0, [pc, #0]	; (8001e2c <USBD_HID_GetDeviceQualifierDesc+0x8>)
 8001e2a:	4770      	bx	lr
 8001e2c:	200000a8 	.word	0x200000a8

08001e30 <USBD_HID_Setup>:
{
 8001e30:	b510      	push	{r4, lr}
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8001e32:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001e36:	780b      	ldrb	r3, [r1, #0]
 8001e38:	f013 0360 	ands.w	r3, r3, #96	; 0x60
 8001e3c:	d025      	beq.n	8001e8a <USBD_HID_Setup+0x5a>
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	d14f      	bne.n	8001ee2 <USBD_HID_Setup+0xb2>
    switch (req->bRequest)
 8001e42:	784b      	ldrb	r3, [r1, #1]
 8001e44:	3b02      	subs	r3, #2
 8001e46:	2b09      	cmp	r3, #9
 8001e48:	d81b      	bhi.n	8001e82 <USBD_HID_Setup+0x52>
 8001e4a:	e8df f003 	tbb	[pc, r3]
 8001e4e:	0914      	.short	0x0914
 8001e50:	1a1a1a1a 	.word	0x1a1a1a1a
 8001e54:	050f1a1a 	.word	0x050f1a1a
      hhid->Protocol = (uint8_t)(req->wValue);
 8001e58:	788b      	ldrb	r3, [r1, #2]
 8001e5a:	6023      	str	r3, [r4, #0]
  return USBD_OK;
 8001e5c:	2000      	movs	r0, #0
      break;
 8001e5e:	e041      	b.n	8001ee4 <USBD_HID_Setup+0xb4>
      USBD_CtlSendData (pdev, 
 8001e60:	2201      	movs	r2, #1
 8001e62:	4621      	mov	r1, r4
 8001e64:	f000 fc26 	bl	80026b4 <USBD_CtlSendData>
  return USBD_OK;
 8001e68:	2000      	movs	r0, #0
      break;
 8001e6a:	e03b      	b.n	8001ee4 <USBD_HID_Setup+0xb4>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8001e6c:	884b      	ldrh	r3, [r1, #2]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	6063      	str	r3, [r4, #4]
  return USBD_OK;
 8001e72:	2000      	movs	r0, #0
      break;
 8001e74:	e036      	b.n	8001ee4 <USBD_HID_Setup+0xb4>
      USBD_CtlSendData (pdev, 
 8001e76:	2201      	movs	r2, #1
 8001e78:	1d21      	adds	r1, r4, #4
 8001e7a:	f000 fc1b 	bl	80026b4 <USBD_CtlSendData>
  return USBD_OK;
 8001e7e:	2000      	movs	r0, #0
      break;      
 8001e80:	e030      	b.n	8001ee4 <USBD_HID_Setup+0xb4>
      USBD_CtlError (pdev, req);
 8001e82:	f000 f9c9 	bl	8002218 <USBD_CtlError>
      return USBD_FAIL; 
 8001e86:	2002      	movs	r0, #2
 8001e88:	e02c      	b.n	8001ee4 <USBD_HID_Setup+0xb4>
    switch (req->bRequest)
 8001e8a:	784b      	ldrb	r3, [r1, #1]
 8001e8c:	2b0a      	cmp	r3, #10
 8001e8e:	d01d      	beq.n	8001ecc <USBD_HID_Setup+0x9c>
 8001e90:	2b0b      	cmp	r3, #11
 8001e92:	d022      	beq.n	8001eda <USBD_HID_Setup+0xaa>
 8001e94:	2b06      	cmp	r3, #6
 8001e96:	d001      	beq.n	8001e9c <USBD_HID_Setup+0x6c>
  return USBD_OK;
 8001e98:	2000      	movs	r0, #0
 8001e9a:	e023      	b.n	8001ee4 <USBD_HID_Setup+0xb4>
      if( req->wValue >> 8 == HID_REPORT_DESC)
 8001e9c:	884b      	ldrh	r3, [r1, #2]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	2b22      	cmp	r3, #34	; 0x22
 8001ea2:	d007      	beq.n	8001eb4 <USBD_HID_Setup+0x84>
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8001ea4:	2b21      	cmp	r3, #33	; 0x21
 8001ea6:	d00b      	beq.n	8001ec0 <USBD_HID_Setup+0x90>
  uint8_t  *pbuf = NULL;
 8001ea8:	2100      	movs	r1, #0
  uint16_t len = 0;
 8001eaa:	460a      	mov	r2, r1
      USBD_CtlSendData (pdev, 
 8001eac:	f000 fc02 	bl	80026b4 <USBD_CtlSendData>
  return USBD_OK;
 8001eb0:	2000      	movs	r0, #0
      break;
 8001eb2:	e017      	b.n	8001ee4 <USBD_HID_Setup+0xb4>
        len = MIN(HID_CUSTOM_REPORT_DESC_SIZE , req->wLength);
 8001eb4:	88ca      	ldrh	r2, [r1, #6]
 8001eb6:	2a3f      	cmp	r2, #63	; 0x3f
 8001eb8:	bf28      	it	cs
 8001eba:	223f      	movcs	r2, #63	; 0x3f
        pbuf = HID_CUSTOM_ReportDesc;
 8001ebc:	490a      	ldr	r1, [pc, #40]	; (8001ee8 <USBD_HID_Setup+0xb8>)
 8001ebe:	e7f5      	b.n	8001eac <USBD_HID_Setup+0x7c>
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8001ec0:	88ca      	ldrh	r2, [r1, #6]
 8001ec2:	2a09      	cmp	r2, #9
 8001ec4:	bf28      	it	cs
 8001ec6:	2209      	movcs	r2, #9
        pbuf = USBD_HID_Desc;   
 8001ec8:	4908      	ldr	r1, [pc, #32]	; (8001eec <USBD_HID_Setup+0xbc>)
 8001eca:	e7ef      	b.n	8001eac <USBD_HID_Setup+0x7c>
      USBD_CtlSendData (pdev,
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f104 0108 	add.w	r1, r4, #8
 8001ed2:	f000 fbef 	bl	80026b4 <USBD_CtlSendData>
  return USBD_OK;
 8001ed6:	2000      	movs	r0, #0
      break;
 8001ed8:	e004      	b.n	8001ee4 <USBD_HID_Setup+0xb4>
      hhid->AltSetting = (uint8_t)(req->wValue);
 8001eda:	788b      	ldrb	r3, [r1, #2]
 8001edc:	60a3      	str	r3, [r4, #8]
  return USBD_OK;
 8001ede:	2000      	movs	r0, #0
      break;
 8001ee0:	e000      	b.n	8001ee4 <USBD_HID_Setup+0xb4>
  return USBD_OK;
 8001ee2:	2000      	movs	r0, #0
}
 8001ee4:	bd10      	pop	{r4, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	2000009c 	.word	0x2000009c

08001ef0 <USBD_HID_DeInit>:
{
 8001ef0:	b510      	push	{r4, lr}
 8001ef2:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8001ef4:	2181      	movs	r1, #129	; 0x81
 8001ef6:	f001 f81c 	bl	8002f32 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8001efa:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8001efe:	b120      	cbz	r0, 8001f0a <USBD_HID_DeInit+0x1a>
    USBD_free(pdev->pClassData);
 8001f00:	f001 f882 	bl	8003008 <USBD_static_free>
    pdev->pClassData = NULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	bd10      	pop	{r4, pc}

08001f0e <USBD_HID_Init>:
{
 8001f0e:	b510      	push	{r4, lr}
 8001f10:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8001f12:	2308      	movs	r3, #8
 8001f14:	2203      	movs	r2, #3
 8001f16:	2181      	movs	r1, #129	; 0x81
 8001f18:	f000 fffa 	bl	8002f10 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8001f1c:	2010      	movs	r0, #16
 8001f1e:	f001 f86f 	bl	8003000 <USBD_static_malloc>
 8001f22:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8001f26:	b118      	cbz	r0, 8001f30 <USBD_HID_Init+0x22>
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	7303      	strb	r3, [r0, #12]
  uint8_t ret = 0;
 8001f2c:	4618      	mov	r0, r3
}
 8001f2e:	bd10      	pop	{r4, pc}
    ret = 1; 
 8001f30:	2001      	movs	r0, #1
 8001f32:	e7fc      	b.n	8001f2e <USBD_HID_Init+0x20>

08001f34 <USBD_HID_SendReport>:
{
 8001f34:	b538      	push	{r3, r4, r5, lr}
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8001f36:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8001f3a:	f890 41fc 	ldrb.w	r4, [r0, #508]	; 0x1fc
 8001f3e:	2c03      	cmp	r4, #3
 8001f40:	d001      	beq.n	8001f46 <USBD_HID_SendReport+0x12>
}
 8001f42:	2000      	movs	r0, #0
 8001f44:	bd38      	pop	{r3, r4, r5, pc}
    if(hhid->state == HID_IDLE)
 8001f46:	7b2b      	ldrb	r3, [r5, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1fa      	bne.n	8001f42 <USBD_HID_SendReport+0xe>
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	460a      	mov	r2, r1
      hhid->state = HID_BUSY;
 8001f50:	2101      	movs	r1, #1
 8001f52:	7329      	strb	r1, [r5, #12]
      USBD_LL_Transmit (pdev, 
 8001f54:	2181      	movs	r1, #129	; 0x81
 8001f56:	f001 f837 	bl	8002fc8 <USBD_LL_Transmit>
 8001f5a:	e7f2      	b.n	8001f42 <USBD_HID_SendReport+0xe>

08001f5c <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8001f5c:	b198      	cbz	r0, 8001f86 <USBD_Init+0x2a>
{
 8001f5e:	b508      	push	{r3, lr}
 8001f60:	4603      	mov	r3, r0
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8001f62:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8001f66:	b110      	cbz	r0, 8001f6e <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8001f6e:	b109      	cbz	r1, 8001f74 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8001f70:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 8001f74:	4618      	mov	r0, r3
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001f76:	2301      	movs	r3, #1
 8001f78:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8001f7c:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8001f7e:	f000 ff7f 	bl	8002e80 <USBD_LL_Init>
  
  return USBD_OK; 
 8001f82:	2000      	movs	r0, #0
}
 8001f84:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8001f86:	2002      	movs	r0, #2
}
 8001f88:	4770      	bx	lr

08001f8a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8001f8a:	b119      	cbz	r1, 8001f94 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8001f8c:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8001f90:	2000      	movs	r0, #0
 8001f92:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8001f94:	2002      	movs	r0, #2
  }
  
  return status;
}
 8001f96:	4770      	bx	lr

08001f98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8001f98:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8001f9a:	f000 ffab 	bl	8002ef4 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	bd08      	pop	{r3, pc}

08001fa2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001fa2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8001fa4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001fa8:	b133      	cbz	r3, 8001fb8 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4798      	blx	r3
 8001fae:	b908      	cbnz	r0, 8001fb4 <USBD_SetClassConfig+0x12>
    {
      ret = USBD_OK;
 8001fb0:	2000      	movs	r0, #0
    }
  }
  return ret; 
}
 8001fb2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	e7fc      	b.n	8001fb2 <USBD_SetClassConfig+0x10>
 8001fb8:	2002      	movs	r0, #2
 8001fba:	e7fa      	b.n	8001fb2 <USBD_SetClassConfig+0x10>

08001fbc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001fbc:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8001fbe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4798      	blx	r3
  return USBD_OK;
}
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	bd08      	pop	{r3, pc}

08001fca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8001fca:	b538      	push	{r3, r4, r5, lr}
 8001fcc:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8001fce:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	f000 f90c 	bl	80021f0 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8001fde:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8001fe2:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8001fe6:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 8001fea:	f001 031f 	and.w	r3, r1, #31
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d00e      	beq.n	8002010 <USBD_LL_SetupStage+0x46>
 8001ff2:	b13b      	cbz	r3, 8002004 <USBD_LL_SetupStage+0x3a>
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d010      	beq.n	800201a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8001ff8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f000 ffa6 	bl	8002f4e <USBD_LL_StallEP>
    break;
 8002002:	e003      	b.n	800200c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002004:	4629      	mov	r1, r5
 8002006:	4620      	mov	r0, r4
 8002008:	f000 fa6b 	bl	80024e2 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 800200c:	2000      	movs	r0, #0
 800200e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002010:	4629      	mov	r1, r5
 8002012:	4620      	mov	r0, r4
 8002014:	f000 fa89 	bl	800252a <USBD_StdItfReq>
    break;
 8002018:	e7f8      	b.n	800200c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800201a:	4629      	mov	r1, r5
 800201c:	4620      	mov	r0, r4
 800201e:	f000 faa0 	bl	8002562 <USBD_StdEPReq>
    break;
 8002022:	e7f3      	b.n	800200c <USBD_LL_SetupStage+0x42>

08002024 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002024:	b510      	push	{r4, lr}
 8002026:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002028:	bb21      	cbnz	r1, 8002074 <USBD_LL_DataOutStage+0x50>
 800202a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800202c:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002030:	2a03      	cmp	r2, #3
 8002032:	d001      	beq.n	8002038 <USBD_LL_DataOutStage+0x14>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002034:	2000      	movs	r0, #0
 8002036:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 8002038:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 800203c:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002040:	4291      	cmp	r1, r2
 8002042:	d80c      	bhi.n	800205e <USBD_LL_DataOutStage+0x3a>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002044:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	b123      	cbz	r3, 8002056 <USBD_LL_DataOutStage+0x32>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800204c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002050:	2a03      	cmp	r2, #3
 8002052:	d100      	bne.n	8002056 <USBD_LL_DataOutStage+0x32>
          pdev->pClass->EP0_RxReady(pdev); 
 8002054:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002056:	4620      	mov	r0, r4
 8002058:	f000 fb49 	bl	80026ee <USBD_CtlSendStatus>
 800205c:	e7ea      	b.n	8002034 <USBD_LL_DataOutStage+0x10>
        pep->rem_length -=  pep->maxpacket;
 800205e:	1a89      	subs	r1, r1, r2
 8002060:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 8002064:	428a      	cmp	r2, r1
 8002066:	bf28      	it	cs
 8002068:	460a      	movcs	r2, r1
        USBD_CtlContinueRx (pdev, 
 800206a:	b292      	uxth	r2, r2
 800206c:	4619      	mov	r1, r3
 800206e:	f000 fb36 	bl	80026de <USBD_CtlContinueRx>
 8002072:	e7df      	b.n	8002034 <USBD_LL_DataOutStage+0x10>
 8002074:	460a      	mov	r2, r1
  else if((pdev->pClass->DataOut != NULL)&&
 8002076:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0d9      	beq.n	8002034 <USBD_LL_DataOutStage+0x10>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002080:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8002084:	2903      	cmp	r1, #3
 8002086:	d1d5      	bne.n	8002034 <USBD_LL_DataOutStage+0x10>
    pdev->pClass->DataOut(pdev, epnum); 
 8002088:	4611      	mov	r1, r2
 800208a:	4798      	blx	r3
 800208c:	e7d2      	b.n	8002034 <USBD_LL_DataOutStage+0x10>

0800208e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800208e:	b510      	push	{r4, lr}
 8002090:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002092:	2900      	cmp	r1, #0
 8002094:	d146      	bne.n	8002124 <USBD_LL_DataInStage+0x96>
 8002096:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002098:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800209c:	2a02      	cmp	r2, #2
 800209e:	d005      	beq.n	80020ac <USBD_LL_DataInStage+0x1e>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80020a0:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d039      	beq.n	800211c <USBD_LL_DataInStage+0x8e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80020a8:	2000      	movs	r0, #0
 80020aa:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 80020ac:	69c1      	ldr	r1, [r0, #28]
 80020ae:	6a02      	ldr	r2, [r0, #32]
 80020b0:	4291      	cmp	r1, r2
 80020b2:	d819      	bhi.n	80020e8 <USBD_LL_DataInStage+0x5a>
        if((pep->total_length % pep->maxpacket == 0) &&
 80020b4:	6981      	ldr	r1, [r0, #24]
 80020b6:	fbb1 f3f2 	udiv	r3, r1, r2
 80020ba:	fb02 1313 	mls	r3, r2, r3, r1
 80020be:	b92b      	cbnz	r3, 80020cc <USBD_LL_DataInStage+0x3e>
 80020c0:	428a      	cmp	r2, r1
 80020c2:	d803      	bhi.n	80020cc <USBD_LL_DataInStage+0x3e>
             (pep->total_length < pdev->ep0_data_len ))
 80020c4:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 80020c8:	4299      	cmp	r1, r3
 80020ca:	d31a      	bcc.n	8002102 <USBD_LL_DataInStage+0x74>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80020cc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	b12b      	cbz	r3, 80020e0 <USBD_LL_DataInStage+0x52>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80020d4:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80020d8:	2a03      	cmp	r2, #3
 80020da:	d101      	bne.n	80020e0 <USBD_LL_DataInStage+0x52>
            pdev->pClass->EP0_TxSent(pdev); 
 80020dc:	4620      	mov	r0, r4
 80020de:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80020e0:	4620      	mov	r0, r4
 80020e2:	f000 fb0f 	bl	8002704 <USBD_CtlReceiveStatus>
 80020e6:	e7db      	b.n	80020a0 <USBD_LL_DataInStage+0x12>
        pep->rem_length -=  pep->maxpacket;
 80020e8:	1a8a      	subs	r2, r1, r2
 80020ea:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 80020ec:	b292      	uxth	r2, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	f000 faed 	bl	80026ce <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 80020f4:	2300      	movs	r3, #0
 80020f6:	461a      	mov	r2, r3
 80020f8:	4619      	mov	r1, r3
 80020fa:	4620      	mov	r0, r4
 80020fc:	f000 ff72 	bl	8002fe4 <USBD_LL_PrepareReceive>
 8002100:	e7ce      	b.n	80020a0 <USBD_LL_DataInStage+0x12>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	4611      	mov	r1, r2
 8002106:	f000 fae2 	bl	80026ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800210a:	2100      	movs	r1, #0
 800210c:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002110:	460b      	mov	r3, r1
 8002112:	460a      	mov	r2, r1
 8002114:	4620      	mov	r0, r4
 8002116:	f000 ff65 	bl	8002fe4 <USBD_LL_PrepareReceive>
 800211a:	e7c1      	b.n	80020a0 <USBD_LL_DataInStage+0x12>
      pdev->dev_test_mode = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8002122:	e7c1      	b.n	80020a8 <USBD_LL_DataInStage+0x1a>
 8002124:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL)&& 
 8002126:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0bb      	beq.n	80020a8 <USBD_LL_DataInStage+0x1a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002130:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8002134:	2903      	cmp	r1, #3
 8002136:	d1b7      	bne.n	80020a8 <USBD_LL_DataInStage+0x1a>
    pdev->pClass->DataIn(pdev, epnum); 
 8002138:	4611      	mov	r1, r2
 800213a:	4798      	blx	r3
 800213c:	e7b4      	b.n	80020a8 <USBD_LL_DataInStage+0x1a>

0800213e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800213e:	b538      	push	{r3, r4, r5, lr}
 8002140:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002142:	2340      	movs	r3, #64	; 0x40
 8002144:	2200      	movs	r2, #0
 8002146:	4611      	mov	r1, r2
 8002148:	f000 fee2 	bl	8002f10 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800214c:	2540      	movs	r5, #64	; 0x40
 800214e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002152:	462b      	mov	r3, r5
 8002154:	2200      	movs	r2, #0
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	4620      	mov	r0, r4
 800215a:	f000 fed9 	bl	8002f10 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800215e:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002160:	2301      	movs	r3, #1
 8002162:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002166:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800216a:	b12b      	cbz	r3, 8002178 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800216c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	7921      	ldrb	r1, [r4, #4]
 8002174:	4620      	mov	r0, r4
 8002176:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002178:	2000      	movs	r0, #0
 800217a:	bd38      	pop	{r3, r4, r5, pc}

0800217c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800217c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800217e:	2000      	movs	r0, #0
 8002180:	4770      	bx	lr

08002182 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002182:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002186:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800218a:	2304      	movs	r3, #4
 800218c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002190:	2000      	movs	r0, #0
 8002192:	4770      	bx	lr

08002194 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002194:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002198:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800219c:	2000      	movs	r0, #0
 800219e:	4770      	bx	lr

080021a0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80021a0:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80021a2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d001      	beq.n	80021ae <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 80021aa:	2000      	movs	r0, #0
 80021ac:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 80021ae:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f8      	beq.n	80021aa <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80021b8:	4798      	blx	r3
 80021ba:	e7f6      	b.n	80021aa <USBD_LL_SOF+0xa>

080021bc <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;
 80021bc:	2300      	movs	r3, #0

    while (*buf != '\0') 
 80021be:	e002      	b.n	80021c6 <USBD_GetLen+0xa>
    {
        len++;
 80021c0:	3301      	adds	r3, #1
 80021c2:	b2db      	uxtb	r3, r3
        buf++;
 80021c4:	3001      	adds	r0, #1
    while (*buf != '\0') 
 80021c6:	7802      	ldrb	r2, [r0, #0]
 80021c8:	2a00      	cmp	r2, #0
 80021ca:	d1f9      	bne.n	80021c0 <USBD_GetLen+0x4>
    }

    return len;
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	4770      	bx	lr

080021d0 <USBD_SetFeature>:
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80021d0:	884b      	ldrh	r3, [r1, #2]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d10b      	bne.n	80021ee <USBD_SetFeature+0x1e>
{
 80021d6:	b510      	push	{r4, lr}
 80021d8:	4604      	mov	r4, r0
    pdev->dev_remote_wakeup = 1;  
 80021da:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 80021de:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80021e6:	4620      	mov	r0, r4
 80021e8:	f000 fa81 	bl	80026ee <USBD_CtlSendStatus>
}
 80021ec:	bd10      	pop	{r4, pc}
 80021ee:	4770      	bx	lr

080021f0 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80021f0:	780b      	ldrb	r3, [r1, #0]
 80021f2:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80021f4:	784b      	ldrb	r3, [r1, #1]
 80021f6:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80021f8:	788b      	ldrb	r3, [r1, #2]
 80021fa:	78ca      	ldrb	r2, [r1, #3]
 80021fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002200:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002202:	790b      	ldrb	r3, [r1, #4]
 8002204:	794a      	ldrb	r2, [r1, #5]
 8002206:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800220a:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800220c:	798b      	ldrb	r3, [r1, #6]
 800220e:	79ca      	ldrb	r2, [r1, #7]
 8002210:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002214:	80c3      	strh	r3, [r0, #6]
}
 8002216:	4770      	bx	lr

08002218 <USBD_CtlError>:
{
 8002218:	b510      	push	{r4, lr}
 800221a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	f000 fe96 	bl	8002f4e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002222:	2100      	movs	r1, #0
 8002224:	4620      	mov	r0, r4
 8002226:	f000 fe92 	bl	8002f4e <USBD_LL_StallEP>
}
 800222a:	bd10      	pop	{r4, pc}

0800222c <USBD_GetDescriptor>:
{
 800222c:	b530      	push	{r4, r5, lr}
 800222e:	b083      	sub	sp, #12
 8002230:	4604      	mov	r4, r0
 8002232:	460d      	mov	r5, r1
  switch (req->wValue >> 8)
 8002234:	884a      	ldrh	r2, [r1, #2]
 8002236:	0a13      	lsrs	r3, r2, #8
 8002238:	3b01      	subs	r3, #1
 800223a:	2b06      	cmp	r3, #6
 800223c:	f200 8081 	bhi.w	8002342 <USBD_GetDescriptor+0x116>
 8002240:	e8df f003 	tbb	[pc, r3]
 8002244:	7f271304 	.word	0x7f271304
 8002248:	637f      	.short	0x637f
 800224a:	70          	.byte	0x70
 800224b:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800224c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f10d 0106 	add.w	r1, sp, #6
 8002256:	7c00      	ldrb	r0, [r0, #16]
 8002258:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800225a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800225e:	b112      	cbz	r2, 8002266 <USBD_GetDescriptor+0x3a>
 8002260:	88eb      	ldrh	r3, [r5, #6]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d171      	bne.n	800234a <USBD_GetDescriptor+0x11e>
}
 8002266:	b003      	add	sp, #12
 8002268:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800226a:	7c03      	ldrb	r3, [r0, #16]
 800226c:	b943      	cbnz	r3, 8002280 <USBD_GetDescriptor+0x54>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800226e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	f10d 0006 	add.w	r0, sp, #6
 8002278:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800227a:	2302      	movs	r3, #2
 800227c:	7043      	strb	r3, [r0, #1]
 800227e:	e7ec      	b.n	800225a <USBD_GetDescriptor+0x2e>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002280:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	f10d 0006 	add.w	r0, sp, #6
 800228a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800228c:	2302      	movs	r3, #2
 800228e:	7043      	strb	r3, [r0, #1]
 8002290:	e7e3      	b.n	800225a <USBD_GetDescriptor+0x2e>
    switch ((uint8_t)(req->wValue))
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	2a05      	cmp	r2, #5
 8002296:	d834      	bhi.n	8002302 <USBD_GetDescriptor+0xd6>
 8002298:	e8df f002 	tbb	[pc, r2]
 800229c:	1b130b03 	.word	0x1b130b03
 80022a0:	2b23      	.short	0x2b23
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80022a2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f10d 0106 	add.w	r1, sp, #6
 80022ac:	7c00      	ldrb	r0, [r0, #16]
 80022ae:	4798      	blx	r3
      break;
 80022b0:	e7d3      	b.n	800225a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80022b2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f10d 0106 	add.w	r1, sp, #6
 80022bc:	7c00      	ldrb	r0, [r0, #16]
 80022be:	4798      	blx	r3
      break;
 80022c0:	e7cb      	b.n	800225a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80022c2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f10d 0106 	add.w	r1, sp, #6
 80022cc:	7c00      	ldrb	r0, [r0, #16]
 80022ce:	4798      	blx	r3
      break;
 80022d0:	e7c3      	b.n	800225a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80022d2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	f10d 0106 	add.w	r1, sp, #6
 80022dc:	7c00      	ldrb	r0, [r0, #16]
 80022de:	4798      	blx	r3
      break;
 80022e0:	e7bb      	b.n	800225a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80022e2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	f10d 0106 	add.w	r1, sp, #6
 80022ec:	7c00      	ldrb	r0, [r0, #16]
 80022ee:	4798      	blx	r3
      break;
 80022f0:	e7b3      	b.n	800225a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80022f2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f10d 0106 	add.w	r1, sp, #6
 80022fc:	7c00      	ldrb	r0, [r0, #16]
 80022fe:	4798      	blx	r3
      break;
 8002300:	e7ab      	b.n	800225a <USBD_GetDescriptor+0x2e>
       USBD_CtlError(pdev , req);
 8002302:	4629      	mov	r1, r5
 8002304:	f7ff ff88 	bl	8002218 <USBD_CtlError>
      return;
 8002308:	e7ad      	b.n	8002266 <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800230a:	7c03      	ldrb	r3, [r0, #16]
 800230c:	b933      	cbnz	r3, 800231c <USBD_GetDescriptor+0xf0>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800230e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002314:	f10d 0006 	add.w	r0, sp, #6
 8002318:	4798      	blx	r3
      break;
 800231a:	e79e      	b.n	800225a <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 800231c:	4629      	mov	r1, r5
 800231e:	f7ff ff7b 	bl	8002218 <USBD_CtlError>
      return;
 8002322:	e7a0      	b.n	8002266 <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002324:	7c03      	ldrb	r3, [r0, #16]
 8002326:	b943      	cbnz	r3, 800233a <USBD_GetDescriptor+0x10e>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002328:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f10d 0006 	add.w	r0, sp, #6
 8002332:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002334:	2307      	movs	r3, #7
 8002336:	7043      	strb	r3, [r0, #1]
      break; 
 8002338:	e78f      	b.n	800225a <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 800233a:	4629      	mov	r1, r5
 800233c:	f7ff ff6c 	bl	8002218 <USBD_CtlError>
      return;
 8002340:	e791      	b.n	8002266 <USBD_GetDescriptor+0x3a>
     USBD_CtlError(pdev , req);
 8002342:	4629      	mov	r1, r5
 8002344:	f7ff ff68 	bl	8002218 <USBD_CtlError>
    return;
 8002348:	e78d      	b.n	8002266 <USBD_GetDescriptor+0x3a>
    len = MIN(len , req->wLength);
 800234a:	429a      	cmp	r2, r3
 800234c:	bf28      	it	cs
 800234e:	461a      	movcs	r2, r3
 8002350:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002354:	4601      	mov	r1, r0
 8002356:	4620      	mov	r0, r4
 8002358:	f000 f9ac 	bl	80026b4 <USBD_CtlSendData>
 800235c:	e783      	b.n	8002266 <USBD_GetDescriptor+0x3a>

0800235e <USBD_SetAddress>:
{
 800235e:	b538      	push	{r3, r4, r5, lr}
 8002360:	4604      	mov	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002362:	888b      	ldrh	r3, [r1, #4]
 8002364:	b9e3      	cbnz	r3, 80023a0 <USBD_SetAddress+0x42>
 8002366:	88cb      	ldrh	r3, [r1, #6]
 8002368:	b9d3      	cbnz	r3, 80023a0 <USBD_SetAddress+0x42>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800236a:	788d      	ldrb	r5, [r1, #2]
 800236c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002370:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002374:	2b03      	cmp	r3, #3
 8002376:	d00c      	beq.n	8002392 <USBD_SetAddress+0x34>
      pdev->dev_address = dev_addr;
 8002378:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800237c:	4629      	mov	r1, r5
 800237e:	f000 fe15 	bl	8002fac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002382:	4620      	mov	r0, r4
 8002384:	f000 f9b3 	bl	80026ee <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002388:	b135      	cbz	r5, 8002398 <USBD_SetAddress+0x3a>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800238a:	2302      	movs	r3, #2
 800238c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8002390:	e009      	b.n	80023a6 <USBD_SetAddress+0x48>
      USBD_CtlError(pdev , req);
 8002392:	f7ff ff41 	bl	8002218 <USBD_CtlError>
 8002396:	e006      	b.n	80023a6 <USBD_SetAddress+0x48>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002398:	2301      	movs	r3, #1
 800239a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 800239e:	e002      	b.n	80023a6 <USBD_SetAddress+0x48>
     USBD_CtlError(pdev , req);                        
 80023a0:	4620      	mov	r0, r4
 80023a2:	f7ff ff39 	bl	8002218 <USBD_CtlError>
}
 80023a6:	bd38      	pop	{r3, r4, r5, pc}

080023a8 <USBD_SetConfig>:
{
 80023a8:	b538      	push	{r3, r4, r5, lr}
 80023aa:	4604      	mov	r4, r0
 80023ac:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 80023ae:	7889      	ldrb	r1, [r1, #2]
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <USBD_SetConfig+0xa0>)
 80023b2:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80023b4:	2901      	cmp	r1, #1
 80023b6:	d809      	bhi.n	80023cc <USBD_SetConfig+0x24>
    switch (pdev->dev_state) 
 80023b8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d009      	beq.n	80023d4 <USBD_SetConfig+0x2c>
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d01c      	beq.n	80023fe <USBD_SetConfig+0x56>
       USBD_CtlError(pdev , req);                     
 80023c4:	4629      	mov	r1, r5
 80023c6:	f7ff ff27 	bl	8002218 <USBD_CtlError>
      break;
 80023ca:	e002      	b.n	80023d2 <USBD_SetConfig+0x2a>
     USBD_CtlError(pdev , req);                              
 80023cc:	4629      	mov	r1, r5
 80023ce:	f7ff ff23 	bl	8002218 <USBD_CtlError>
}
 80023d2:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx) 
 80023d4:	b181      	cbz	r1, 80023f8 <USBD_SetConfig+0x50>
        pdev->dev_config = cfgidx;
 80023d6:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80023d8:	2303      	movs	r3, #3
 80023da:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80023de:	f7ff fde0 	bl	8001fa2 <USBD_SetClassConfig>
 80023e2:	2802      	cmp	r0, #2
 80023e4:	d003      	beq.n	80023ee <USBD_SetConfig+0x46>
        USBD_CtlSendStatus(pdev);
 80023e6:	4620      	mov	r0, r4
 80023e8:	f000 f981 	bl	80026ee <USBD_CtlSendStatus>
 80023ec:	e7f1      	b.n	80023d2 <USBD_SetConfig+0x2a>
          USBD_CtlError(pdev , req);  
 80023ee:	4629      	mov	r1, r5
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7ff ff11 	bl	8002218 <USBD_CtlError>
          return;
 80023f6:	e7ec      	b.n	80023d2 <USBD_SetConfig+0x2a>
         USBD_CtlSendStatus(pdev);
 80023f8:	f000 f979 	bl	80026ee <USBD_CtlSendStatus>
 80023fc:	e7e9      	b.n	80023d2 <USBD_SetConfig+0x2a>
      if (cfgidx == 0) 
 80023fe:	b189      	cbz	r1, 8002424 <USBD_SetConfig+0x7c>
      else  if (cfgidx != pdev->dev_config) 
 8002400:	6843      	ldr	r3, [r0, #4]
 8002402:	4299      	cmp	r1, r3
 8002404:	d01d      	beq.n	8002442 <USBD_SetConfig+0x9a>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002406:	b2d9      	uxtb	r1, r3
 8002408:	f7ff fdd8 	bl	8001fbc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <USBD_SetConfig+0xa0>)
 800240e:	7819      	ldrb	r1, [r3, #0]
 8002410:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002412:	4620      	mov	r0, r4
 8002414:	f7ff fdc5 	bl	8001fa2 <USBD_SetClassConfig>
 8002418:	2802      	cmp	r0, #2
 800241a:	d00d      	beq.n	8002438 <USBD_SetConfig+0x90>
        USBD_CtlSendStatus(pdev);
 800241c:	4620      	mov	r0, r4
 800241e:	f000 f966 	bl	80026ee <USBD_CtlSendStatus>
 8002422:	e7d6      	b.n	80023d2 <USBD_SetConfig+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002424:	2302      	movs	r3, #2
 8002426:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800242a:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800242c:	f7ff fdc6 	bl	8001fbc <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8002430:	4620      	mov	r0, r4
 8002432:	f000 f95c 	bl	80026ee <USBD_CtlSendStatus>
 8002436:	e7cc      	b.n	80023d2 <USBD_SetConfig+0x2a>
          USBD_CtlError(pdev , req);  
 8002438:	4629      	mov	r1, r5
 800243a:	4620      	mov	r0, r4
 800243c:	f7ff feec 	bl	8002218 <USBD_CtlError>
          return;
 8002440:	e7c7      	b.n	80023d2 <USBD_SetConfig+0x2a>
        USBD_CtlSendStatus(pdev);
 8002442:	f000 f954 	bl	80026ee <USBD_CtlSendStatus>
 8002446:	e7c4      	b.n	80023d2 <USBD_SetConfig+0x2a>
 8002448:	20000108 	.word	0x20000108

0800244c <USBD_GetConfig>:
{
 800244c:	b508      	push	{r3, lr}
  if (req->wLength != 1) 
 800244e:	88cb      	ldrh	r3, [r1, #6]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d108      	bne.n	8002466 <USBD_GetConfig+0x1a>
    switch (pdev->dev_state )  
 8002454:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002458:	2b02      	cmp	r3, #2
 800245a:	d007      	beq.n	800246c <USBD_GetConfig+0x20>
 800245c:	2b03      	cmp	r3, #3
 800245e:	d00d      	beq.n	800247c <USBD_GetConfig+0x30>
       USBD_CtlError(pdev , req);
 8002460:	f7ff feda 	bl	8002218 <USBD_CtlError>
}
 8002464:	e001      	b.n	800246a <USBD_GetConfig+0x1e>
     USBD_CtlError(pdev , req);
 8002466:	f7ff fed7 	bl	8002218 <USBD_CtlError>
}
 800246a:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0;
 800246c:	4601      	mov	r1, r0
 800246e:	2300      	movs	r3, #0
 8002470:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8002474:	2201      	movs	r2, #1
 8002476:	f000 f91d 	bl	80026b4 <USBD_CtlSendData>
      break;
 800247a:	e7f6      	b.n	800246a <USBD_GetConfig+0x1e>
      USBD_CtlSendData (pdev, 
 800247c:	2201      	movs	r2, #1
 800247e:	1d01      	adds	r1, r0, #4
 8002480:	f000 f918 	bl	80026b4 <USBD_CtlSendData>
      break;
 8002484:	e7f1      	b.n	800246a <USBD_GetConfig+0x1e>

08002486 <USBD_GetStatus>:
{
 8002486:	b508      	push	{r3, lr}
  switch (pdev->dev_state) 
 8002488:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800248c:	3b02      	subs	r3, #2
 800248e:	2b01      	cmp	r3, #1
 8002490:	d80c      	bhi.n	80024ac <USBD_GetStatus+0x26>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002492:	2301      	movs	r3, #1
 8002494:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002496:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800249a:	b10b      	cbz	r3, 80024a0 <USBD_GetStatus+0x1a>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800249c:	2303      	movs	r3, #3
 800249e:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80024a0:	2202      	movs	r2, #2
 80024a2:	f100 010c 	add.w	r1, r0, #12
 80024a6:	f000 f905 	bl	80026b4 <USBD_CtlSendData>
}
 80024aa:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);                        
 80024ac:	f7ff feb4 	bl	8002218 <USBD_CtlError>
}
 80024b0:	e7fb      	b.n	80024aa <USBD_GetStatus+0x24>

080024b2 <USBD_ClrFeature>:
{
 80024b2:	b510      	push	{r4, lr}
 80024b4:	4604      	mov	r4, r0
  switch (pdev->dev_state)
 80024b6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80024ba:	3b02      	subs	r3, #2
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d80d      	bhi.n	80024dc <USBD_ClrFeature+0x2a>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80024c0:	884b      	ldrh	r3, [r1, #2]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d109      	bne.n	80024da <USBD_ClrFeature+0x28>
      pdev->dev_remote_wakeup = 0; 
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80024cc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80024d4:	4620      	mov	r0, r4
 80024d6:	f000 f90a 	bl	80026ee <USBD_CtlSendStatus>
}
 80024da:	bd10      	pop	{r4, pc}
     USBD_CtlError(pdev , req);
 80024dc:	f7ff fe9c 	bl	8002218 <USBD_CtlError>
}
 80024e0:	e7fb      	b.n	80024da <USBD_ClrFeature+0x28>

080024e2 <USBD_StdDevReq>:
{
 80024e2:	b508      	push	{r3, lr}
  switch (req->bRequest) 
 80024e4:	784b      	ldrb	r3, [r1, #1]
 80024e6:	2b09      	cmp	r3, #9
 80024e8:	d81c      	bhi.n	8002524 <USBD_StdDevReq+0x42>
 80024ea:	e8df f003 	tbb	[pc, r3]
 80024ee:	1812      	.short	0x1812
 80024f0:	091b151b 	.word	0x091b151b
 80024f4:	0c0f1b05 	.word	0x0c0f1b05
    USBD_GetDescriptor (pdev, req) ;
 80024f8:	f7ff fe98 	bl	800222c <USBD_GetDescriptor>
}
 80024fc:	2000      	movs	r0, #0
 80024fe:	bd08      	pop	{r3, pc}
    USBD_SetAddress(pdev, req);
 8002500:	f7ff ff2d 	bl	800235e <USBD_SetAddress>
    break;
 8002504:	e7fa      	b.n	80024fc <USBD_StdDevReq+0x1a>
    USBD_SetConfig (pdev , req);
 8002506:	f7ff ff4f 	bl	80023a8 <USBD_SetConfig>
    break;
 800250a:	e7f7      	b.n	80024fc <USBD_StdDevReq+0x1a>
    USBD_GetConfig (pdev , req);
 800250c:	f7ff ff9e 	bl	800244c <USBD_GetConfig>
    break;
 8002510:	e7f4      	b.n	80024fc <USBD_StdDevReq+0x1a>
    USBD_GetStatus (pdev , req);
 8002512:	f7ff ffb8 	bl	8002486 <USBD_GetStatus>
    break;
 8002516:	e7f1      	b.n	80024fc <USBD_StdDevReq+0x1a>
    USBD_SetFeature (pdev , req);    
 8002518:	f7ff fe5a 	bl	80021d0 <USBD_SetFeature>
    break;
 800251c:	e7ee      	b.n	80024fc <USBD_StdDevReq+0x1a>
    USBD_ClrFeature (pdev , req);
 800251e:	f7ff ffc8 	bl	80024b2 <USBD_ClrFeature>
    break;
 8002522:	e7eb      	b.n	80024fc <USBD_StdDevReq+0x1a>
    USBD_CtlError(pdev , req);
 8002524:	f7ff fe78 	bl	8002218 <USBD_CtlError>
    break;
 8002528:	e7e8      	b.n	80024fc <USBD_StdDevReq+0x1a>

0800252a <USBD_StdItfReq>:
{
 800252a:	b538      	push	{r3, r4, r5, lr}
 800252c:	4604      	mov	r4, r0
 800252e:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002530:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002534:	2b03      	cmp	r3, #3
 8002536:	d111      	bne.n	800255c <USBD_StdItfReq+0x32>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8002538:	790b      	ldrb	r3, [r1, #4]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d80b      	bhi.n	8002556 <USBD_StdItfReq+0x2c>
      pdev->pClass->Setup (pdev, req); 
 800253e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002546:	88eb      	ldrh	r3, [r5, #6]
 8002548:	b10b      	cbz	r3, 800254e <USBD_StdItfReq+0x24>
}
 800254a:	2000      	movs	r0, #0
 800254c:	bd38      	pop	{r3, r4, r5, pc}
         USBD_CtlSendStatus(pdev);
 800254e:	4620      	mov	r0, r4
 8002550:	f000 f8cd 	bl	80026ee <USBD_CtlSendStatus>
 8002554:	e7f9      	b.n	800254a <USBD_StdItfReq+0x20>
       USBD_CtlError(pdev , req);
 8002556:	f7ff fe5f 	bl	8002218 <USBD_CtlError>
 800255a:	e7f6      	b.n	800254a <USBD_StdItfReq+0x20>
     USBD_CtlError(pdev , req);
 800255c:	f7ff fe5c 	bl	8002218 <USBD_CtlError>
    break;
 8002560:	e7f3      	b.n	800254a <USBD_StdItfReq+0x20>

08002562 <USBD_StdEPReq>:
{
 8002562:	b538      	push	{r3, r4, r5, lr}
 8002564:	4605      	mov	r5, r0
 8002566:	460c      	mov	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002568:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800256a:	780b      	ldrb	r3, [r1, #0]
 800256c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002570:	2b20      	cmp	r3, #32
 8002572:	d105      	bne.n	8002580 <USBD_StdEPReq+0x1e>
    pdev->pClass->Setup (pdev, req);
 8002574:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	4798      	blx	r3
}
 800257c:	2000      	movs	r0, #0
 800257e:	bd38      	pop	{r3, r4, r5, pc}
 8002580:	b2d1      	uxtb	r1, r2
  switch (req->bRequest) 
 8002582:	7863      	ldrb	r3, [r4, #1]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d025      	beq.n	80025d4 <USBD_StdEPReq+0x72>
 8002588:	2b00      	cmp	r3, #0
 800258a:	d047      	beq.n	800261c <USBD_StdEPReq+0xba>
 800258c:	2b03      	cmp	r3, #3
 800258e:	d1f5      	bne.n	800257c <USBD_StdEPReq+0x1a>
    switch (pdev->dev_state) 
 8002590:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002594:	2b02      	cmp	r3, #2
 8002596:	d005      	beq.n	80025a4 <USBD_StdEPReq+0x42>
 8002598:	2b03      	cmp	r3, #3
 800259a:	d00a      	beq.n	80025b2 <USBD_StdEPReq+0x50>
      USBD_CtlError(pdev , req);
 800259c:	4621      	mov	r1, r4
 800259e:	f7ff fe3b 	bl	8002218 <USBD_CtlError>
      break;    
 80025a2:	e7eb      	b.n	800257c <USBD_StdEPReq+0x1a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80025a4:	2900      	cmp	r1, #0
 80025a6:	d0e9      	beq.n	800257c <USBD_StdEPReq+0x1a>
 80025a8:	2980      	cmp	r1, #128	; 0x80
 80025aa:	d0e7      	beq.n	800257c <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 80025ac:	f000 fccf 	bl	8002f4e <USBD_LL_StallEP>
 80025b0:	e7e4      	b.n	800257c <USBD_StdEPReq+0x1a>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80025b2:	8863      	ldrh	r3, [r4, #2]
 80025b4:	b923      	cbnz	r3, 80025c0 <USBD_StdEPReq+0x5e>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80025b6:	b119      	cbz	r1, 80025c0 <USBD_StdEPReq+0x5e>
 80025b8:	2980      	cmp	r1, #128	; 0x80
 80025ba:	d001      	beq.n	80025c0 <USBD_StdEPReq+0x5e>
          USBD_LL_StallEP(pdev , ep_addr);
 80025bc:	f000 fcc7 	bl	8002f4e <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 80025c0:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	4621      	mov	r1, r4
 80025c8:	4628      	mov	r0, r5
 80025ca:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80025cc:	4628      	mov	r0, r5
 80025ce:	f000 f88e 	bl	80026ee <USBD_CtlSendStatus>
      break;
 80025d2:	e7d3      	b.n	800257c <USBD_StdEPReq+0x1a>
    switch (pdev->dev_state) 
 80025d4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d005      	beq.n	80025e8 <USBD_StdEPReq+0x86>
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d00a      	beq.n	80025f6 <USBD_StdEPReq+0x94>
      USBD_CtlError(pdev , req);
 80025e0:	4621      	mov	r1, r4
 80025e2:	f7ff fe19 	bl	8002218 <USBD_CtlError>
      break;    
 80025e6:	e7c9      	b.n	800257c <USBD_StdEPReq+0x1a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80025e8:	2900      	cmp	r1, #0
 80025ea:	d0c7      	beq.n	800257c <USBD_StdEPReq+0x1a>
 80025ec:	2980      	cmp	r1, #128	; 0x80
 80025ee:	d0c5      	beq.n	800257c <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 80025f0:	f000 fcad 	bl	8002f4e <USBD_LL_StallEP>
 80025f4:	e7c2      	b.n	800257c <USBD_StdEPReq+0x1a>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80025f6:	8863      	ldrh	r3, [r4, #2]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1bf      	bne.n	800257c <USBD_StdEPReq+0x1a>
        if ((ep_addr & 0x7F) != 0x00) 
 80025fc:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8002600:	d103      	bne.n	800260a <USBD_StdEPReq+0xa8>
        USBD_CtlSendStatus(pdev);
 8002602:	4628      	mov	r0, r5
 8002604:	f000 f873 	bl	80026ee <USBD_CtlSendStatus>
 8002608:	e7b8      	b.n	800257c <USBD_StdEPReq+0x1a>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800260a:	f000 fcae 	bl	8002f6a <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800260e:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4621      	mov	r1, r4
 8002616:	4628      	mov	r0, r5
 8002618:	4798      	blx	r3
 800261a:	e7f2      	b.n	8002602 <USBD_StdEPReq+0xa0>
    switch (pdev->dev_state) 
 800261c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002620:	2b02      	cmp	r3, #2
 8002622:	d005      	beq.n	8002630 <USBD_StdEPReq+0xce>
 8002624:	2b03      	cmp	r3, #3
 8002626:	d009      	beq.n	800263c <USBD_StdEPReq+0xda>
      USBD_CtlError(pdev , req);
 8002628:	4621      	mov	r1, r4
 800262a:	f7ff fdf5 	bl	8002218 <USBD_CtlError>
      break;
 800262e:	e7a5      	b.n	800257c <USBD_StdEPReq+0x1a>
      if ((ep_addr & 0x7F) != 0x00) 
 8002630:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8002634:	d0a2      	beq.n	800257c <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 8002636:	f000 fc8a 	bl	8002f4e <USBD_LL_StallEP>
 800263a:	e79f      	b.n	800257c <USBD_StdEPReq+0x1a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800263c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002640:	d111      	bne.n	8002666 <USBD_StdEPReq+0x104>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8002642:	f001 047f 	and.w	r4, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002646:	3410      	adds	r4, #16
 8002648:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 800264c:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800264e:	4628      	mov	r0, r5
 8002650:	f000 fc99 	bl	8002f86 <USBD_LL_IsStallEP>
 8002654:	b170      	cbz	r0, 8002674 <USBD_StdEPReq+0x112>
        pep->status = 0x0001;     
 8002656:	2301      	movs	r3, #1
 8002658:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 800265a:	2202      	movs	r2, #2
 800265c:	4621      	mov	r1, r4
 800265e:	4628      	mov	r0, r5
 8002660:	f000 f828 	bl	80026b4 <USBD_CtlSendData>
      break;
 8002664:	e78a      	b.n	800257c <USBD_StdEPReq+0x1a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002666:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 800266a:	3401      	adds	r4, #1
 800266c:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8002670:	3404      	adds	r4, #4
 8002672:	e7ec      	b.n	800264e <USBD_StdEPReq+0xec>
        pep->status = 0x0000;  
 8002674:	2300      	movs	r3, #0
 8002676:	6023      	str	r3, [r4, #0]
 8002678:	e7ef      	b.n	800265a <USBD_StdEPReq+0xf8>

0800267a <USBD_GetString>:
  if (desc != NULL) 
 800267a:	b1d0      	cbz	r0, 80026b2 <USBD_GetString+0x38>
{
 800267c:	b570      	push	{r4, r5, r6, lr}
 800267e:	460d      	mov	r5, r1
 8002680:	4616      	mov	r6, r2
 8002682:	4604      	mov	r4, r0
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002684:	f7ff fd9a 	bl	80021bc <USBD_GetLen>
 8002688:	3001      	adds	r0, #1
 800268a:	0040      	lsls	r0, r0, #1
 800268c:	b280      	uxth	r0, r0
 800268e:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *len;
 8002690:	7028      	strb	r0, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002692:	2303      	movs	r3, #3
 8002694:	706b      	strb	r3, [r5, #1]
 8002696:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8002698:	e007      	b.n	80026aa <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 800269a:	3401      	adds	r4, #1
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 80026a2:	3302      	adds	r3, #2
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2100      	movs	r1, #0
 80026a8:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0') 
 80026aa:	7821      	ldrb	r1, [r4, #0]
 80026ac:	2900      	cmp	r1, #0
 80026ae:	d1f4      	bne.n	800269a <USBD_GetString+0x20>
}
 80026b0:	bd70      	pop	{r4, r5, r6, pc}
 80026b2:	4770      	bx	lr

080026b4 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80026b4:	b510      	push	{r4, lr}
 80026b6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80026b8:	2202      	movs	r2, #2
 80026ba:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80026be:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 80026c0:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80026c2:	460a      	mov	r2, r1
 80026c4:	2100      	movs	r1, #0
 80026c6:	f000 fc7f 	bl	8002fc8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80026ca:	2000      	movs	r0, #0
 80026cc:	bd10      	pop	{r4, pc}

080026ce <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80026ce:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80026d0:	4613      	mov	r3, r2
 80026d2:	460a      	mov	r2, r1
 80026d4:	2100      	movs	r1, #0
 80026d6:	f000 fc77 	bl	8002fc8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80026da:	2000      	movs	r0, #0
 80026dc:	bd08      	pop	{r3, pc}

080026de <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80026de:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80026e0:	4613      	mov	r3, r2
 80026e2:	460a      	mov	r2, r1
 80026e4:	2100      	movs	r1, #0
 80026e6:	f000 fc7d 	bl	8002fe4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80026ea:	2000      	movs	r0, #0
 80026ec:	bd08      	pop	{r3, pc}

080026ee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80026ee:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80026f0:	2304      	movs	r3, #4
 80026f2:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80026f6:	2300      	movs	r3, #0
 80026f8:	461a      	mov	r2, r3
 80026fa:	4619      	mov	r1, r3
 80026fc:	f000 fc64 	bl	8002fc8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002700:	2000      	movs	r0, #0
 8002702:	bd08      	pop	{r3, pc}

08002704 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002704:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002706:	2305      	movs	r3, #5
 8002708:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800270c:	2300      	movs	r3, #0
 800270e:	461a      	mov	r2, r3
 8002710:	4619      	mov	r1, r3
 8002712:	f000 fc67 	bl	8002fe4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002716:	2000      	movs	r0, #0
 8002718:	bd08      	pop	{r3, pc}
	...

0800271c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002720:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <MX_GPIO_Init+0xac>)
 8002722:	699a      	ldr	r2, [r3, #24]
 8002724:	f042 0220 	orr.w	r2, r2, #32
 8002728:	619a      	str	r2, [r3, #24]
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	f002 0220 	and.w	r2, r2, #32
 8002730:	9200      	str	r2, [sp, #0]
 8002732:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	f042 0204 	orr.w	r2, r2, #4
 800273a:	619a      	str	r2, [r3, #24]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	f002 0204 	and.w	r2, r2, #4
 8002742:	9201      	str	r2, [sp, #4]
 8002744:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002746:	699a      	ldr	r2, [r3, #24]
 8002748:	f042 0208 	orr.w	r2, r2, #8
 800274c:	619a      	str	r2, [r3, #24]
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	f002 0208 	and.w	r2, r2, #8
 8002754:	9202      	str	r2, [sp, #8]
 8002756:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	f042 0210 	orr.w	r2, r2, #16
 800275e:	619a      	str	r2, [r3, #24]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	9303      	str	r3, [sp, #12]
 8002768:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_Enable_GPIO_Port, USB_Enable_Pin, GPIO_PIN_RESET);
 800276a:	4d18      	ldr	r5, [pc, #96]	; (80027cc <MX_GPIO_Init+0xb0>)
 800276c:	2200      	movs	r2, #0
 800276e:	2108      	movs	r1, #8
 8002770:	4628      	mov	r0, r5
 8002772:	f7fd fea2 	bl	80004ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_RESUME_Pin Button_SUSPEND_Pin Button_STEP_INTO_Pin Button_STEP_OVER_Pin 
                           Button_STEP_RETURN_Pin Button_RUN_TO_LINE_Pin Button_RESTART_Pin Button_TERMINATE_AND_RELAUNCH_Pin */
  GPIO_InitStruct.Pin = Button_RESUME_Pin|Button_SUSPEND_Pin|Button_STEP_INTO_Pin|Button_STEP_OVER_Pin 
 8002776:	23ff      	movs	r3, #255	; 0xff
 8002778:	9304      	str	r3, [sp, #16]
                          |Button_STEP_RETURN_Pin|Button_RUN_TO_LINE_Pin|Button_RESTART_Pin|Button_TERMINATE_AND_RELAUNCH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800277a:	2600      	movs	r6, #0
 800277c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800277e:	2401      	movs	r4, #1
 8002780:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002782:	a904      	add	r1, sp, #16
 8002784:	4812      	ldr	r0, [pc, #72]	; (80027d0 <MX_GPIO_Init+0xb4>)
 8002786:	f7fd fda7 	bl	80002d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_TERMINATE_Pin Button_RUN_Pin Button_DEBUG_Pin Button_BUILD_Pin */
  GPIO_InitStruct.Pin = Button_TERMINATE_Pin|Button_RUN_Pin|Button_DEBUG_Pin|Button_BUILD_Pin;
 800278a:	f640 4303 	movw	r3, #3075	; 0xc03
 800278e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002790:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002792:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002794:	a904      	add	r1, sp, #16
 8002796:	4628      	mov	r0, r5
 8002798:	f7fd fd9e 	bl	80002d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_Enable_Pin */
  GPIO_InitStruct.Pin = USB_Enable_Pin;
 800279c:	2308      	movs	r3, #8
 800279e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027a2:	2303      	movs	r3, #3
 80027a4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(USB_Enable_GPIO_Port, &GPIO_InitStruct);
 80027a6:	a904      	add	r1, sp, #16
 80027a8:	4628      	mov	r0, r5
 80027aa:	f7fd fd95 	bl	80002d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80027ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027b2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2302      	movs	r3, #2
 80027b8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ba:	a904      	add	r1, sp, #16
 80027bc:	4805      	ldr	r0, [pc, #20]	; (80027d4 <MX_GPIO_Init+0xb8>)
 80027be:	f7fd fd8b 	bl	80002d8 <HAL_GPIO_Init>

}
 80027c2:	b008      	add	sp, #32
 80027c4:	bd70      	pop	{r4, r5, r6, pc}
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40010c00 	.word	0x40010c00
 80027d0:	40010800 	.word	0x40010800
 80027d4:	40011000 	.word	0x40011000

080027d8 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80027d8:	e7fe      	b.n	80027d8 <_Error_Handler>
	...

080027dc <SystemClock_Config>:
{
 80027dc:	b500      	push	{lr}
 80027de:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027e0:	2201      	movs	r2, #1
 80027e2:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027e8:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80027ea:	2100      	movs	r1, #0
 80027ec:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027ee:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027f0:	2202      	movs	r2, #2
 80027f2:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027f4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80027f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80027fa:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027fc:	a80a      	add	r0, sp, #40	; 0x28
 80027fe:	f7fe fadb 	bl	8000db8 <HAL_RCC_OscConfig>
 8002802:	bb48      	cbnz	r0, 8002858 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002804:	230f      	movs	r3, #15
 8002806:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002808:	2102      	movs	r1, #2
 800280a:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800280c:	2300      	movs	r3, #0
 800280e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002814:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002816:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002818:	a805      	add	r0, sp, #20
 800281a:	f7fe fcf3 	bl	8001204 <HAL_RCC_ClockConfig>
 800281e:	bb00      	cbnz	r0, 8002862 <SystemClock_Config+0x86>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002820:	2310      	movs	r3, #16
 8002822:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002824:	2300      	movs	r3, #0
 8002826:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002828:	a801      	add	r0, sp, #4
 800282a:	f7fe fdad 	bl	8001388 <HAL_RCCEx_PeriphCLKConfig>
 800282e:	b9e8      	cbnz	r0, 800286c <SystemClock_Config+0x90>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002830:	f7fe fda4 	bl	800137c <HAL_RCC_GetHCLKFreq>
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <SystemClock_Config+0x9c>)
 8002836:	fba3 3000 	umull	r3, r0, r3, r0
 800283a:	0980      	lsrs	r0, r0, #6
 800283c:	f7fd fd20 	bl	8000280 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002840:	2004      	movs	r0, #4
 8002842:	f7fd fd33 	bl	80002ac <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	4611      	mov	r1, r2
 800284a:	f04f 30ff 	mov.w	r0, #4294967295
 800284e:	f7fd fcd7 	bl	8000200 <HAL_NVIC_SetPriority>
}
 8002852:	b015      	add	sp, #84	; 0x54
 8002854:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002858:	f240 1151 	movw	r1, #337	; 0x151
 800285c:	4807      	ldr	r0, [pc, #28]	; (800287c <SystemClock_Config+0xa0>)
 800285e:	f7ff ffbb 	bl	80027d8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002862:	f240 115f 	movw	r1, #351	; 0x15f
 8002866:	4805      	ldr	r0, [pc, #20]	; (800287c <SystemClock_Config+0xa0>)
 8002868:	f7ff ffb6 	bl	80027d8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800286c:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <SystemClock_Config+0xa0>)
 8002872:	f7ff ffb1 	bl	80027d8 <_Error_Handler>
 8002876:	bf00      	nop
 8002878:	10624dd3 	.word	0x10624dd3
 800287c:	08003190 	.word	0x08003190

08002880 <main>:
{
 8002880:	b500      	push	{lr}
 8002882:	b085      	sub	sp, #20
  HAL_Init();
 8002884:	f7fd fc78 	bl	8000178 <HAL_Init>
  uint8_t txbuffer[8]= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8002888:	2400      	movs	r4, #0
 800288a:	9402      	str	r4, [sp, #8]
 800288c:	9403      	str	r4, [sp, #12]
  uint8_t sendbuffer[8]={0x00,0x00,0x39,0x00,0x00,0x00,0x00,0x00};
 800288e:	9400      	str	r4, [sp, #0]
 8002890:	9401      	str	r4, [sp, #4]
 8002892:	2339      	movs	r3, #57	; 0x39
 8002894:	f88d 3002 	strb.w	r3, [sp, #2]
  SystemClock_Config();
 8002898:	f7ff ffa0 	bl	80027dc <SystemClock_Config>
  MX_GPIO_Init();
 800289c:	f7ff ff3e 	bl	800271c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80028a0:	f000 fa74 	bl	8002d8c <MX_USB_DEVICE_Init>
  keyboardHID.id = 1;
 80028a4:	4b95      	ldr	r3, [pc, #596]	; (8002afc <main+0x27c>)
 80028a6:	2501      	movs	r5, #1
 80028a8:	701d      	strb	r5, [r3, #0]
  keyboardHID.modifiers = 0;
 80028aa:	705c      	strb	r4, [r3, #1]
  keyboardHID.key1 = 0;
 80028ac:	709c      	strb	r4, [r3, #2]
  keyboardHID.key2 = 0;
 80028ae:	70dc      	strb	r4, [r3, #3]
  keyboardHID.key3 = 0;
 80028b0:	711c      	strb	r4, [r3, #4]
  HAL_Delay(800);
 80028b2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80028b6:	f7fd fc7f 	bl	80001b8 <HAL_Delay>
  HAL_GPIO_WritePin(USB_Enable_GPIO_Port, USB_Enable_Pin, SET);
 80028ba:	462a      	mov	r2, r5
 80028bc:	2108      	movs	r1, #8
 80028be:	4890      	ldr	r0, [pc, #576]	; (8002b00 <main+0x280>)
 80028c0:	f7fd fdfb 	bl	80004ba <HAL_GPIO_WritePin>
 80028c4:	e12a      	b.n	8002b1c <main+0x29c>
			keyboardHID.key1 = KEY_F8;
 80028c6:	498d      	ldr	r1, [pc, #564]	; (8002afc <main+0x27c>)
 80028c8:	2341      	movs	r3, #65	; 0x41
 80028ca:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 80028cc:	2205      	movs	r2, #5
 80028ce:	4620      	mov	r0, r4
 80028d0:	f7ff fb30 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 80028d4:	2014      	movs	r0, #20
 80028d6:	f7fd fc6f 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_RESUME_GPIO_Port, Button_RESUME_Pin));
 80028da:	2101      	movs	r1, #1
 80028dc:	4889      	ldr	r0, [pc, #548]	; (8002b04 <main+0x284>)
 80028de:	f7fd fde5 	bl	80004ac <HAL_GPIO_ReadPin>
 80028e2:	2800      	cmp	r0, #0
 80028e4:	d0f9      	beq.n	80028da <main+0x5a>
			keyboardHID.key1 = 0;
 80028e6:	4985      	ldr	r1, [pc, #532]	; (8002afc <main+0x27c>)
 80028e8:	2300      	movs	r3, #0
 80028ea:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 80028ec:	2205      	movs	r2, #5
 80028ee:	4886      	ldr	r0, [pc, #536]	; (8002b08 <main+0x288>)
 80028f0:	f7ff fb20 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 80028f4:	2014      	movs	r0, #20
 80028f6:	f7fd fc5f 	bl	80001b8 <HAL_Delay>
 80028fa:	e137      	b.n	8002b6c <main+0x2ec>
			keyboardHID.key1 = KEY_F9;
 80028fc:	497f      	ldr	r1, [pc, #508]	; (8002afc <main+0x27c>)
 80028fe:	2342      	movs	r3, #66	; 0x42
 8002900:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002902:	2205      	movs	r2, #5
 8002904:	4880      	ldr	r0, [pc, #512]	; (8002b08 <main+0x288>)
 8002906:	f7ff fb15 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 800290a:	2014      	movs	r0, #20
 800290c:	f7fd fc54 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_SUSPEND_GPIO_Port, Button_SUSPEND_Pin));
 8002910:	2102      	movs	r1, #2
 8002912:	487c      	ldr	r0, [pc, #496]	; (8002b04 <main+0x284>)
 8002914:	f7fd fdca 	bl	80004ac <HAL_GPIO_ReadPin>
 8002918:	2800      	cmp	r0, #0
 800291a:	d0f9      	beq.n	8002910 <main+0x90>
			keyboardHID.key1 = 0;
 800291c:	4977      	ldr	r1, [pc, #476]	; (8002afc <main+0x27c>)
 800291e:	2300      	movs	r3, #0
 8002920:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002922:	2205      	movs	r2, #5
 8002924:	4878      	ldr	r0, [pc, #480]	; (8002b08 <main+0x288>)
 8002926:	f7ff fb05 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 800292a:	2014      	movs	r0, #20
 800292c:	f7fd fc44 	bl	80001b8 <HAL_Delay>
 8002930:	e123      	b.n	8002b7a <main+0x2fa>
			keyboardHID.key1 = KEY_F5;
 8002932:	4972      	ldr	r1, [pc, #456]	; (8002afc <main+0x27c>)
 8002934:	233e      	movs	r3, #62	; 0x3e
 8002936:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002938:	2205      	movs	r2, #5
 800293a:	4873      	ldr	r0, [pc, #460]	; (8002b08 <main+0x288>)
 800293c:	f7ff fafa 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002940:	2014      	movs	r0, #20
 8002942:	f7fd fc39 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_STEP_INTO_GPIO_Port, Button_STEP_INTO_Pin));
 8002946:	2104      	movs	r1, #4
 8002948:	486e      	ldr	r0, [pc, #440]	; (8002b04 <main+0x284>)
 800294a:	f7fd fdaf 	bl	80004ac <HAL_GPIO_ReadPin>
 800294e:	2800      	cmp	r0, #0
 8002950:	d0f9      	beq.n	8002946 <main+0xc6>
			keyboardHID.key1 = 0;
 8002952:	496a      	ldr	r1, [pc, #424]	; (8002afc <main+0x27c>)
 8002954:	2300      	movs	r3, #0
 8002956:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002958:	2205      	movs	r2, #5
 800295a:	486b      	ldr	r0, [pc, #428]	; (8002b08 <main+0x288>)
 800295c:	f7ff faea 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002960:	2014      	movs	r0, #20
 8002962:	f7fd fc29 	bl	80001b8 <HAL_Delay>
 8002966:	e10f      	b.n	8002b88 <main+0x308>
			keyboardHID.key1 = KEY_F6;
 8002968:	4964      	ldr	r1, [pc, #400]	; (8002afc <main+0x27c>)
 800296a:	233f      	movs	r3, #63	; 0x3f
 800296c:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 800296e:	2205      	movs	r2, #5
 8002970:	4865      	ldr	r0, [pc, #404]	; (8002b08 <main+0x288>)
 8002972:	f7ff fadf 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002976:	2014      	movs	r0, #20
 8002978:	f7fd fc1e 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_STEP_OVER_GPIO_Port, Button_STEP_OVER_Pin));
 800297c:	2108      	movs	r1, #8
 800297e:	4861      	ldr	r0, [pc, #388]	; (8002b04 <main+0x284>)
 8002980:	f7fd fd94 	bl	80004ac <HAL_GPIO_ReadPin>
 8002984:	2800      	cmp	r0, #0
 8002986:	d0f9      	beq.n	800297c <main+0xfc>
			keyboardHID.key1 = 0;
 8002988:	495c      	ldr	r1, [pc, #368]	; (8002afc <main+0x27c>)
 800298a:	2300      	movs	r3, #0
 800298c:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 800298e:	2205      	movs	r2, #5
 8002990:	485d      	ldr	r0, [pc, #372]	; (8002b08 <main+0x288>)
 8002992:	f7ff facf 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002996:	2014      	movs	r0, #20
 8002998:	f7fd fc0e 	bl	80001b8 <HAL_Delay>
 800299c:	e0fb      	b.n	8002b96 <main+0x316>
			keyboardHID.key1 = KEY_F7;
 800299e:	4957      	ldr	r1, [pc, #348]	; (8002afc <main+0x27c>)
 80029a0:	2340      	movs	r3, #64	; 0x40
 80029a2:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 80029a4:	2205      	movs	r2, #5
 80029a6:	4858      	ldr	r0, [pc, #352]	; (8002b08 <main+0x288>)
 80029a8:	f7ff fac4 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 80029ac:	2014      	movs	r0, #20
 80029ae:	f7fd fc03 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_STEP_RETURN_GPIO_Port, Button_STEP_RETURN_Pin));
 80029b2:	2110      	movs	r1, #16
 80029b4:	4853      	ldr	r0, [pc, #332]	; (8002b04 <main+0x284>)
 80029b6:	f7fd fd79 	bl	80004ac <HAL_GPIO_ReadPin>
 80029ba:	2800      	cmp	r0, #0
 80029bc:	d0f9      	beq.n	80029b2 <main+0x132>
			keyboardHID.key1 = 0;
 80029be:	494f      	ldr	r1, [pc, #316]	; (8002afc <main+0x27c>)
 80029c0:	2300      	movs	r3, #0
 80029c2:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 80029c4:	2205      	movs	r2, #5
 80029c6:	4850      	ldr	r0, [pc, #320]	; (8002b08 <main+0x288>)
 80029c8:	f7ff fab4 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 80029cc:	2014      	movs	r0, #20
 80029ce:	f7fd fbf3 	bl	80001b8 <HAL_Delay>
 80029d2:	e0e7      	b.n	8002ba4 <main+0x324>
			keyboardHID.modifiers = USB_HID_MODIFIER_LEFT_CTRL;
 80029d4:	4949      	ldr	r1, [pc, #292]	; (8002afc <main+0x27c>)
 80029d6:	2301      	movs	r3, #1
 80029d8:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = KEY_R;
 80029da:	2315      	movs	r3, #21
 80029dc:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 80029de:	2205      	movs	r2, #5
 80029e0:	4849      	ldr	r0, [pc, #292]	; (8002b08 <main+0x288>)
 80029e2:	f7ff faa7 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 80029e6:	2014      	movs	r0, #20
 80029e8:	f7fd fbe6 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_RUN_TO_LINE_GPIO_Port, Button_RUN_TO_LINE_Pin));
 80029ec:	2120      	movs	r1, #32
 80029ee:	4845      	ldr	r0, [pc, #276]	; (8002b04 <main+0x284>)
 80029f0:	f7fd fd5c 	bl	80004ac <HAL_GPIO_ReadPin>
 80029f4:	2800      	cmp	r0, #0
 80029f6:	d0f9      	beq.n	80029ec <main+0x16c>
			keyboardHID.modifiers = 0;
 80029f8:	4940      	ldr	r1, [pc, #256]	; (8002afc <main+0x27c>)
 80029fa:	2300      	movs	r3, #0
 80029fc:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = 0;
 80029fe:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002a00:	2205      	movs	r2, #5
 8002a02:	4841      	ldr	r0, [pc, #260]	; (8002b08 <main+0x288>)
 8002a04:	f7ff fa96 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002a08:	2014      	movs	r0, #20
 8002a0a:	f7fd fbd5 	bl	80001b8 <HAL_Delay>
 8002a0e:	e0d0      	b.n	8002bb2 <main+0x332>
			keyboardHID.key1 = KEY_F10;
 8002a10:	493a      	ldr	r1, [pc, #232]	; (8002afc <main+0x27c>)
 8002a12:	2343      	movs	r3, #67	; 0x43
 8002a14:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002a16:	2205      	movs	r2, #5
 8002a18:	483b      	ldr	r0, [pc, #236]	; (8002b08 <main+0x288>)
 8002a1a:	f7ff fa8b 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002a1e:	2014      	movs	r0, #20
 8002a20:	f7fd fbca 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_RESTART_GPIO_Port, Button_RESTART_Pin));
 8002a24:	2140      	movs	r1, #64	; 0x40
 8002a26:	4837      	ldr	r0, [pc, #220]	; (8002b04 <main+0x284>)
 8002a28:	f7fd fd40 	bl	80004ac <HAL_GPIO_ReadPin>
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	d0f9      	beq.n	8002a24 <main+0x1a4>
			keyboardHID.key1 = 0;
 8002a30:	4932      	ldr	r1, [pc, #200]	; (8002afc <main+0x27c>)
 8002a32:	2300      	movs	r3, #0
 8002a34:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002a36:	2205      	movs	r2, #5
 8002a38:	4833      	ldr	r0, [pc, #204]	; (8002b08 <main+0x288>)
 8002a3a:	f7ff fa7b 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002a3e:	2014      	movs	r0, #20
 8002a40:	f7fd fbba 	bl	80001b8 <HAL_Delay>
 8002a44:	e0bc      	b.n	8002bc0 <main+0x340>
			keyboardHID.modifiers = USB_HID_MODIFIER_LEFT_CTRL;
 8002a46:	492d      	ldr	r1, [pc, #180]	; (8002afc <main+0x27c>)
 8002a48:	2301      	movs	r3, #1
 8002a4a:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = KEY_F8;
 8002a4c:	2341      	movs	r3, #65	; 0x41
 8002a4e:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002a50:	2205      	movs	r2, #5
 8002a52:	482d      	ldr	r0, [pc, #180]	; (8002b08 <main+0x288>)
 8002a54:	f7ff fa6e 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002a58:	2014      	movs	r0, #20
 8002a5a:	f7fd fbad 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_TERMINATE_AND_RELAUNCH_GPIO_Port, Button_TERMINATE_AND_RELAUNCH_Pin));
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	4828      	ldr	r0, [pc, #160]	; (8002b04 <main+0x284>)
 8002a62:	f7fd fd23 	bl	80004ac <HAL_GPIO_ReadPin>
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d0f9      	beq.n	8002a5e <main+0x1de>
			keyboardHID.modifiers = 0;
 8002a6a:	4924      	ldr	r1, [pc, #144]	; (8002afc <main+0x27c>)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = 0;
 8002a70:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002a72:	2205      	movs	r2, #5
 8002a74:	4824      	ldr	r0, [pc, #144]	; (8002b08 <main+0x288>)
 8002a76:	f7ff fa5d 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002a7a:	2014      	movs	r0, #20
 8002a7c:	f7fd fb9c 	bl	80001b8 <HAL_Delay>
 8002a80:	e0a5      	b.n	8002bce <main+0x34e>
			keyboardHID.modifiers = USB_HID_MODIFIER_LEFT_CTRL;
 8002a82:	491e      	ldr	r1, [pc, #120]	; (8002afc <main+0x27c>)
 8002a84:	2301      	movs	r3, #1
 8002a86:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = KEY_F2;
 8002a88:	233b      	movs	r3, #59	; 0x3b
 8002a8a:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002a8c:	2205      	movs	r2, #5
 8002a8e:	481e      	ldr	r0, [pc, #120]	; (8002b08 <main+0x288>)
 8002a90:	f7ff fa50 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002a94:	2014      	movs	r0, #20
 8002a96:	f7fd fb8f 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_TERMINATE_GPIO_Port, Button_TERMINATE_Pin));
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	4818      	ldr	r0, [pc, #96]	; (8002b00 <main+0x280>)
 8002a9e:	f7fd fd05 	bl	80004ac <HAL_GPIO_ReadPin>
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	d0f9      	beq.n	8002a9a <main+0x21a>
			keyboardHID.modifiers = 0;
 8002aa6:	4915      	ldr	r1, [pc, #84]	; (8002afc <main+0x27c>)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = 0;
 8002aac:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002aae:	2205      	movs	r2, #5
 8002ab0:	4815      	ldr	r0, [pc, #84]	; (8002b08 <main+0x288>)
 8002ab2:	f7ff fa3f 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002ab6:	2014      	movs	r0, #20
 8002ab8:	f7fd fb7e 	bl	80001b8 <HAL_Delay>
 8002abc:	e08e      	b.n	8002bdc <main+0x35c>
			keyboardHID.modifiers = USB_HID_MODIFIER_LEFT_CTRL;
 8002abe:	490f      	ldr	r1, [pc, #60]	; (8002afc <main+0x27c>)
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = KEY_F11;
 8002ac4:	2344      	movs	r3, #68	; 0x44
 8002ac6:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002ac8:	2205      	movs	r2, #5
 8002aca:	480f      	ldr	r0, [pc, #60]	; (8002b08 <main+0x288>)
 8002acc:	f7ff fa32 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002ad0:	2014      	movs	r0, #20
 8002ad2:	f7fd fb71 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_RUN_GPIO_Port, Button_RUN_Pin));
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	4809      	ldr	r0, [pc, #36]	; (8002b00 <main+0x280>)
 8002ada:	f7fd fce7 	bl	80004ac <HAL_GPIO_ReadPin>
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	d0f9      	beq.n	8002ad6 <main+0x256>
			keyboardHID.modifiers = 0;
 8002ae2:	4906      	ldr	r1, [pc, #24]	; (8002afc <main+0x27c>)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = 0;
 8002ae8:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002aea:	2205      	movs	r2, #5
 8002aec:	4806      	ldr	r0, [pc, #24]	; (8002b08 <main+0x288>)
 8002aee:	f7ff fa21 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002af2:	2014      	movs	r0, #20
 8002af4:	f7fd fb60 	bl	80001b8 <HAL_Delay>
 8002af8:	e077      	b.n	8002bea <main+0x36a>
 8002afa:	bf00      	nop
 8002afc:	20000124 	.word	0x20000124
 8002b00:	40010c00 	.word	0x40010c00
 8002b04:	40010800 	.word	0x40010800
 8002b08:	2000012c 	.word	0x2000012c
	  if(!HAL_GPIO_ReadPin(Button_BUILD_GPIO_Port, Button_BUILD_Pin))
 8002b0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b10:	4856      	ldr	r0, [pc, #344]	; (8002c6c <main+0x3ec>)
 8002b12:	f7fd fccb 	bl	80004ac <HAL_GPIO_ReadPin>
 8002b16:	2800      	cmp	r0, #0
 8002b18:	f000 808a 	beq.w	8002c30 <main+0x3b0>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)>0?0:1);
 8002b1c:	4c54      	ldr	r4, [pc, #336]	; (8002c70 <main+0x3f0>)
 8002b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b22:	4620      	mov	r0, r4
 8002b24:	f7fd fcc2 	bl	80004ac <HAL_GPIO_ReadPin>
 8002b28:	fab0 f280 	clz	r2, r0
 8002b2c:	0952      	lsrs	r2, r2, #5
 8002b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b32:	4620      	mov	r0, r4
 8002b34:	f7fd fcc1 	bl	80004ba <HAL_GPIO_WritePin>
	USBD_HID_SendReport(&hUsbDeviceFS,sendbuffer,8);//发送报文
 8002b38:	4c4e      	ldr	r4, [pc, #312]	; (8002c74 <main+0x3f4>)
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	4669      	mov	r1, sp
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7ff f9f8 	bl	8001f34 <USBD_HID_SendReport>
	HAL_Delay(40);
 8002b44:	2028      	movs	r0, #40	; 0x28
 8002b46:	f7fd fb37 	bl	80001b8 <HAL_Delay>
	USBD_HID_SendReport(&hUsbDeviceFS,txbuffer,8);//发送报文
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	eb0d 0102 	add.w	r1, sp, r2
 8002b50:	4620      	mov	r0, r4
 8002b52:	f7ff f9ef 	bl	8001f34 <USBD_HID_SendReport>
	HAL_Delay(4000);
 8002b56:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002b5a:	f7fd fb2d 	bl	80001b8 <HAL_Delay>
	  if(!HAL_GPIO_ReadPin(Button_RESUME_GPIO_Port, Button_RESUME_Pin))
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4845      	ldr	r0, [pc, #276]	; (8002c78 <main+0x3f8>)
 8002b62:	f7fd fca3 	bl	80004ac <HAL_GPIO_ReadPin>
 8002b66:	2800      	cmp	r0, #0
 8002b68:	f43f aead 	beq.w	80028c6 <main+0x46>
	  if(!HAL_GPIO_ReadPin(Button_SUSPEND_GPIO_Port, Button_SUSPEND_Pin))
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	4842      	ldr	r0, [pc, #264]	; (8002c78 <main+0x3f8>)
 8002b70:	f7fd fc9c 	bl	80004ac <HAL_GPIO_ReadPin>
 8002b74:	2800      	cmp	r0, #0
 8002b76:	f43f aec1 	beq.w	80028fc <main+0x7c>
	  if(!HAL_GPIO_ReadPin(Button_STEP_INTO_GPIO_Port, Button_STEP_INTO_Pin))
 8002b7a:	2104      	movs	r1, #4
 8002b7c:	483e      	ldr	r0, [pc, #248]	; (8002c78 <main+0x3f8>)
 8002b7e:	f7fd fc95 	bl	80004ac <HAL_GPIO_ReadPin>
 8002b82:	2800      	cmp	r0, #0
 8002b84:	f43f aed5 	beq.w	8002932 <main+0xb2>
	  if(!HAL_GPIO_ReadPin(Button_STEP_OVER_GPIO_Port, Button_STEP_OVER_Pin))
 8002b88:	2108      	movs	r1, #8
 8002b8a:	483b      	ldr	r0, [pc, #236]	; (8002c78 <main+0x3f8>)
 8002b8c:	f7fd fc8e 	bl	80004ac <HAL_GPIO_ReadPin>
 8002b90:	2800      	cmp	r0, #0
 8002b92:	f43f aee9 	beq.w	8002968 <main+0xe8>
	  if(!HAL_GPIO_ReadPin(Button_STEP_RETURN_GPIO_Port, Button_STEP_RETURN_Pin))
 8002b96:	2110      	movs	r1, #16
 8002b98:	4837      	ldr	r0, [pc, #220]	; (8002c78 <main+0x3f8>)
 8002b9a:	f7fd fc87 	bl	80004ac <HAL_GPIO_ReadPin>
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	f43f aefd 	beq.w	800299e <main+0x11e>
	  if(!HAL_GPIO_ReadPin(Button_RUN_TO_LINE_GPIO_Port, Button_RUN_TO_LINE_Pin))
 8002ba4:	2120      	movs	r1, #32
 8002ba6:	4834      	ldr	r0, [pc, #208]	; (8002c78 <main+0x3f8>)
 8002ba8:	f7fd fc80 	bl	80004ac <HAL_GPIO_ReadPin>
 8002bac:	2800      	cmp	r0, #0
 8002bae:	f43f af11 	beq.w	80029d4 <main+0x154>
	  if(!HAL_GPIO_ReadPin(Button_RESTART_GPIO_Port, Button_RESTART_Pin))
 8002bb2:	2140      	movs	r1, #64	; 0x40
 8002bb4:	4830      	ldr	r0, [pc, #192]	; (8002c78 <main+0x3f8>)
 8002bb6:	f7fd fc79 	bl	80004ac <HAL_GPIO_ReadPin>
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	f43f af28 	beq.w	8002a10 <main+0x190>
	  if(!HAL_GPIO_ReadPin(Button_TERMINATE_AND_RELAUNCH_GPIO_Port, Button_TERMINATE_AND_RELAUNCH_Pin))
 8002bc0:	2180      	movs	r1, #128	; 0x80
 8002bc2:	482d      	ldr	r0, [pc, #180]	; (8002c78 <main+0x3f8>)
 8002bc4:	f7fd fc72 	bl	80004ac <HAL_GPIO_ReadPin>
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	f43f af3c 	beq.w	8002a46 <main+0x1c6>
	  if(!HAL_GPIO_ReadPin(Button_TERMINATE_GPIO_Port, Button_TERMINATE_Pin))
 8002bce:	2101      	movs	r1, #1
 8002bd0:	4826      	ldr	r0, [pc, #152]	; (8002c6c <main+0x3ec>)
 8002bd2:	f7fd fc6b 	bl	80004ac <HAL_GPIO_ReadPin>
 8002bd6:	2800      	cmp	r0, #0
 8002bd8:	f43f af53 	beq.w	8002a82 <main+0x202>
	  if(!HAL_GPIO_ReadPin(Button_RUN_GPIO_Port, Button_RUN_Pin))
 8002bdc:	2102      	movs	r1, #2
 8002bde:	4823      	ldr	r0, [pc, #140]	; (8002c6c <main+0x3ec>)
 8002be0:	f7fd fc64 	bl	80004ac <HAL_GPIO_ReadPin>
 8002be4:	2800      	cmp	r0, #0
 8002be6:	f43f af6a 	beq.w	8002abe <main+0x23e>
	  if(!HAL_GPIO_ReadPin(Button_DEBUG_GPIO_Port, Button_DEBUG_Pin))
 8002bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bee:	481f      	ldr	r0, [pc, #124]	; (8002c6c <main+0x3ec>)
 8002bf0:	f7fd fc5c 	bl	80004ac <HAL_GPIO_ReadPin>
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d189      	bne.n	8002b0c <main+0x28c>
			keyboardHID.key1 = KEY_F11;
 8002bf8:	4920      	ldr	r1, [pc, #128]	; (8002c7c <main+0x3fc>)
 8002bfa:	2344      	movs	r3, #68	; 0x44
 8002bfc:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002bfe:	2205      	movs	r2, #5
 8002c00:	481c      	ldr	r0, [pc, #112]	; (8002c74 <main+0x3f4>)
 8002c02:	f7ff f997 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002c06:	2014      	movs	r0, #20
 8002c08:	f7fd fad6 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_DEBUG_GPIO_Port, Button_DEBUG_Pin));
 8002c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c10:	4816      	ldr	r0, [pc, #88]	; (8002c6c <main+0x3ec>)
 8002c12:	f7fd fc4b 	bl	80004ac <HAL_GPIO_ReadPin>
 8002c16:	2800      	cmp	r0, #0
 8002c18:	d0f8      	beq.n	8002c0c <main+0x38c>
			keyboardHID.key1 = 0;
 8002c1a:	4918      	ldr	r1, [pc, #96]	; (8002c7c <main+0x3fc>)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002c20:	2205      	movs	r2, #5
 8002c22:	4814      	ldr	r0, [pc, #80]	; (8002c74 <main+0x3f4>)
 8002c24:	f7ff f986 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002c28:	2014      	movs	r0, #20
 8002c2a:	f7fd fac5 	bl	80001b8 <HAL_Delay>
 8002c2e:	e76d      	b.n	8002b0c <main+0x28c>
			keyboardHID.modifiers = USB_HID_MODIFIER_LEFT_CTRL;
 8002c30:	4912      	ldr	r1, [pc, #72]	; (8002c7c <main+0x3fc>)
 8002c32:	2301      	movs	r3, #1
 8002c34:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = KEY_B;
 8002c36:	2205      	movs	r2, #5
 8002c38:	708a      	strb	r2, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002c3a:	480e      	ldr	r0, [pc, #56]	; (8002c74 <main+0x3f4>)
 8002c3c:	f7ff f97a 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002c40:	2014      	movs	r0, #20
 8002c42:	f7fd fab9 	bl	80001b8 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(Button_BUILD_GPIO_Port, Button_BUILD_Pin));
 8002c46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c4a:	4808      	ldr	r0, [pc, #32]	; (8002c6c <main+0x3ec>)
 8002c4c:	f7fd fc2e 	bl	80004ac <HAL_GPIO_ReadPin>
 8002c50:	2800      	cmp	r0, #0
 8002c52:	d0f8      	beq.n	8002c46 <main+0x3c6>
			keyboardHID.modifiers = 0;
 8002c54:	4909      	ldr	r1, [pc, #36]	; (8002c7c <main+0x3fc>)
 8002c56:	2300      	movs	r3, #0
 8002c58:	704b      	strb	r3, [r1, #1]
			keyboardHID.key1 = 0;
 8002c5a:	708b      	strb	r3, [r1, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8002c5c:	2205      	movs	r2, #5
 8002c5e:	4805      	ldr	r0, [pc, #20]	; (8002c74 <main+0x3f4>)
 8002c60:	f7ff f968 	bl	8001f34 <USBD_HID_SendReport>
			HAL_Delay(20);
 8002c64:	2014      	movs	r0, #20
 8002c66:	f7fd faa7 	bl	80001b8 <HAL_Delay>
 8002c6a:	e757      	b.n	8002b1c <main+0x29c>
 8002c6c:	40010c00 	.word	0x40010c00
 8002c70:	40011000 	.word	0x40011000
 8002c74:	2000012c 	.word	0x2000012c
 8002c78:	40010800 	.word	0x40010800
 8002c7c:	20000124 	.word	0x20000124

08002c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c80:	b500      	push	{lr}
 8002c82:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c84:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <HAL_MspInit+0x8c>)
 8002c86:	699a      	ldr	r2, [r3, #24]
 8002c88:	f042 0201 	orr.w	r2, r2, #1
 8002c8c:	619a      	str	r2, [r3, #24]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c98:	2003      	movs	r0, #3
 8002c9a:	f7fd fa9f 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	f06f 000b 	mvn.w	r0, #11
 8002ca6:	f7fd faab 	bl	8000200 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002caa:	2200      	movs	r2, #0
 8002cac:	4611      	mov	r1, r2
 8002cae:	f06f 000a 	mvn.w	r0, #10
 8002cb2:	f7fd faa5 	bl	8000200 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	4611      	mov	r1, r2
 8002cba:	f06f 0009 	mvn.w	r0, #9
 8002cbe:	f7fd fa9f 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	f06f 0004 	mvn.w	r0, #4
 8002cca:	f7fd fa99 	bl	8000200 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	f06f 0003 	mvn.w	r0, #3
 8002cd6:	f7fd fa93 	bl	8000200 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4611      	mov	r1, r2
 8002cde:	f06f 0001 	mvn.w	r0, #1
 8002ce2:	f7fd fa8d 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	4611      	mov	r1, r2
 8002cea:	f04f 30ff 	mov.w	r0, #4294967295
 8002cee:	f7fd fa87 	bl	8000200 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <HAL_MspInit+0x90>)
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d04:	b003      	add	sp, #12
 8002d06:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40010000 	.word	0x40010000

08002d14 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d14:	4770      	bx	lr

08002d16 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002d16:	e7fe      	b.n	8002d16 <HardFault_Handler>

08002d18 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002d18:	e7fe      	b.n	8002d18 <MemManage_Handler>

08002d1a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002d1a:	e7fe      	b.n	8002d1a <BusFault_Handler>

08002d1c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002d1c:	e7fe      	b.n	8002d1c <UsageFault_Handler>

08002d1e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d1e:	4770      	bx	lr

08002d20 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d20:	4770      	bx	lr

08002d22 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d22:	4770      	bx	lr

08002d24 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002d24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d26:	f7fd fa39 	bl	800019c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002d2a:	f7fd fad0 	bl	80002ce <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d2e:	bd08      	pop	{r3, pc}

08002d30 <USB_LP_CAN1_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002d30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002d32:	4802      	ldr	r0, [pc, #8]	; (8002d3c <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8002d34:	f7fd ff0c 	bl	8000b50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002d38:	bd08      	pop	{r3, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000350 	.word	0x20000350

08002d40 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <SystemInit+0x40>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	4a0d      	ldr	r2, [pc, #52]	; (8002d84 <SystemInit+0x44>)
 8002d4e:	400a      	ands	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002d58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d5c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d64:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002d6c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002d6e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002d72:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <SystemInit+0x48>)
 8002d76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d7a:	609a      	str	r2, [r3, #8]
#endif 
}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	f8ff0000 	.word	0xf8ff0000
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */                                        
void MX_USB_DEVICE_Init(void)
{
 8002d8c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8002d8e:	4c07      	ldr	r4, [pc, #28]	; (8002dac <MX_USB_DEVICE_Init+0x20>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	4907      	ldr	r1, [pc, #28]	; (8002db0 <MX_USB_DEVICE_Init+0x24>)
 8002d94:	4620      	mov	r0, r4
 8002d96:	f7ff f8e1 	bl	8001f5c <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);
 8002d9a:	4906      	ldr	r1, [pc, #24]	; (8002db4 <MX_USB_DEVICE_Init+0x28>)
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f7ff f8f4 	bl	8001f8a <USBD_RegisterClass>

  USBD_Start(&hUsbDeviceFS);
 8002da2:	4620      	mov	r0, r4
 8002da4:	f7ff f8f8 	bl	8001f98 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002da8:	bd10      	pop	{r4, pc}
 8002daa:	bf00      	nop
 8002dac:	2000012c 	.word	0x2000012c
 8002db0:	200000b8 	.word	0x200000b8
 8002db4:	20000040 	.word	0x20000040

08002db8 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 8002db8:	6802      	ldr	r2, [r0, #0]
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_PCD_MspInit+0x3c>)
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d000      	beq.n	8002dc2 <HAL_PCD_MspInit+0xa>
 8002dc0:	4770      	bx	lr
{
 8002dc2:	b500      	push	{lr}
 8002dc4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002dc6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002dd0:	61da      	str	r2, [r3, #28]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	4611      	mov	r1, r2
 8002de0:	2014      	movs	r0, #20
 8002de2:	f7fd fa0d 	bl	8000200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002de6:	2014      	movs	r0, #20
 8002de8:	f7fd fa3e 	bl	8000268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002dec:	b003      	add	sp, #12
 8002dee:	f85d fb04 	ldr.w	pc, [sp], #4
 8002df2:	bf00      	nop
 8002df4:	40005c00 	.word	0x40005c00

08002df8 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup Stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002df8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002dfa:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8002dfe:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002e02:	f7ff f8e2 	bl	8001fca <USBD_LL_SetupStage>
}
 8002e06:	bd08      	pop	{r3, pc}

08002e08 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002e08:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002e0a:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002e0e:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002e12:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002e16:	f7ff f905 	bl	8002024 <USBD_LL_DataOutStage>
}
 8002e1a:	bd08      	pop	{r3, pc}

08002e1c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002e1c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002e1e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e24:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002e28:	f7ff f931 	bl	800208e <USBD_LL_DataInStage>
}
 8002e2c:	bd08      	pop	{r3, pc}

08002e2e <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002e2e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002e30:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002e34:	f7ff f9b4 	bl	80021a0 <USBD_LL_SOF>
}
 8002e38:	bd08      	pop	{r3, pc}

08002e3a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002e3a:	b510      	push	{r4, lr}
 8002e3c:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8002e3e:	2101      	movs	r1, #1
 8002e40:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002e44:	f7ff f99a 	bl	800217c <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002e48:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 8002e4c:	f7ff f977 	bl	800213e <USBD_LL_Reset>
}
 8002e50:	bd10      	pop	{r4, pc}
	...

08002e54 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002e54:	b510      	push	{r4, lr}
 8002e56:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002e58:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002e5c:	f7ff f991 	bl	8002182 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 8002e60:	69a3      	ldr	r3, [r4, #24]
 8002e62:	b123      	cbz	r3, 8002e6e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002e64:	4a02      	ldr	r2, [pc, #8]	; (8002e70 <HAL_PCD_SuspendCallback+0x1c>)
 8002e66:	6913      	ldr	r3, [r2, #16]
 8002e68:	f043 0306 	orr.w	r3, r3, #6
 8002e6c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8002e6e:	bd10      	pop	{r4, pc}
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002e74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002e76:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002e7a:	f7ff f98b 	bl	8002194 <USBD_LL_Resume>
  
}
 8002e7e:	bd08      	pop	{r3, pc}

08002e80 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8002e80:	b510      	push	{r4, lr}
 8002e82:	4604      	mov	r4, r0
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8002e84:	4818      	ldr	r0, [pc, #96]	; (8002ee8 <USBD_LL_Init+0x68>)
 8002e86:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8002e8a:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8002e8e:	4b17      	ldr	r3, [pc, #92]	; (8002eec <USBD_LL_Init+0x6c>)
 8002e90:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002e92:	2308      	movs	r3, #8
 8002e94:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002e96:	2302      	movs	r3, #2
 8002e98:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002ea2:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002ea4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002ea6:	f7fd fb0e 	bl	80004c6 <HAL_PCD_Init>
 8002eaa:	b9b8      	cbnz	r0, 8002edc <USBD_LL_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002eac:	2318      	movs	r3, #24
 8002eae:	2200      	movs	r2, #0
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002eb6:	f7fd ff50 	bl	8000d5a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002eba:	2358      	movs	r3, #88	; 0x58
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2180      	movs	r1, #128	; 0x80
 8002ec0:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002ec4:	f7fd ff49 	bl	8000d5a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);  
 8002ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2181      	movs	r1, #129	; 0x81
 8002ed0:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002ed4:	f7fd ff41 	bl	8000d5a <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8002ed8:	2000      	movs	r0, #0
 8002eda:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002edc:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8002ee0:	4803      	ldr	r0, [pc, #12]	; (8002ef0 <USBD_LL_Init+0x70>)
 8002ee2:	f7ff fc79 	bl	80027d8 <_Error_Handler>
 8002ee6:	e7e1      	b.n	8002eac <USBD_LL_Init+0x2c>
 8002ee8:	20000350 	.word	0x20000350
 8002eec:	40005c00 	.word	0x40005c00
 8002ef0:	080031b0 	.word	0x080031b0

08002ef4 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002ef4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002ef6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002efa:	f7fd fb4f 	bl	800059c <HAL_PCD_Start>
     
  switch (hal_status) {
 8002efe:	b118      	cbz	r0, 8002f08 <USBD_LL_Start+0x14>
 8002f00:	2802      	cmp	r0, #2
 8002f02:	d003      	beq.n	8002f0c <USBD_LL_Start+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002f04:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002f06:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8002f08:	2000      	movs	r0, #0
 8002f0a:	e7fc      	b.n	8002f06 <USBD_LL_Start+0x12>
      usb_status = USBD_BUSY;
 8002f0c:	2001      	movs	r0, #1
    break;
 8002f0e:	e7fa      	b.n	8002f06 <USBD_LL_Start+0x12>

08002f10 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8002f10:	b510      	push	{r4, lr}
 8002f12:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8002f14:	4613      	mov	r3, r2
 8002f16:	4622      	mov	r2, r4
 8002f18:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f1c:	f7fd fb69 	bl	80005f2 <HAL_PCD_EP_Open>
                               ep_addr, 
                               ep_mps, 
                               ep_type);
  
     
  switch (hal_status) {
 8002f20:	b118      	cbz	r0, 8002f2a <USBD_LL_OpenEP+0x1a>
 8002f22:	2802      	cmp	r0, #2
 8002f24:	d003      	beq.n	8002f2e <USBD_LL_OpenEP+0x1e>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002f26:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002f28:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	e7fc      	b.n	8002f28 <USBD_LL_OpenEP+0x18>
      usb_status = USBD_BUSY;
 8002f2e:	2001      	movs	r0, #1
    break;
 8002f30:	e7fa      	b.n	8002f28 <USBD_LL_OpenEP+0x18>

08002f32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002f32:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002f34:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f38:	f7fd fb84 	bl	8000644 <HAL_PCD_EP_Close>
      
  switch (hal_status) {
 8002f3c:	b118      	cbz	r0, 8002f46 <USBD_LL_CloseEP+0x14>
 8002f3e:	2802      	cmp	r0, #2
 8002f40:	d003      	beq.n	8002f4a <USBD_LL_CloseEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002f42:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002f44:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8002f46:	2000      	movs	r0, #0
 8002f48:	e7fc      	b.n	8002f44 <USBD_LL_CloseEP+0x12>
      usb_status = USBD_BUSY;
 8002f4a:	2001      	movs	r0, #1
    break;
 8002f4c:	e7fa      	b.n	8002f44 <USBD_LL_CloseEP+0x12>

08002f4e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002f4e:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002f50:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f54:	f7fd feac 	bl	8000cb0 <HAL_PCD_EP_SetStall>
      
  switch (hal_status) {
 8002f58:	b118      	cbz	r0, 8002f62 <USBD_LL_StallEP+0x14>
 8002f5a:	2802      	cmp	r0, #2
 8002f5c:	d003      	beq.n	8002f66 <USBD_LL_StallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002f5e:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002f60:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8002f62:	2000      	movs	r0, #0
 8002f64:	e7fc      	b.n	8002f60 <USBD_LL_StallEP+0x12>
      usb_status = USBD_BUSY;
 8002f66:	2001      	movs	r0, #1
    break;
 8002f68:	e7fa      	b.n	8002f60 <USBD_LL_StallEP+0x12>

08002f6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002f6a:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002f6c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f70:	f7fd fecc 	bl	8000d0c <HAL_PCD_EP_ClrStall>
     
  switch (hal_status) {
 8002f74:	b118      	cbz	r0, 8002f7e <USBD_LL_ClearStallEP+0x14>
 8002f76:	2802      	cmp	r0, #2
 8002f78:	d003      	beq.n	8002f82 <USBD_LL_ClearStallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002f7a:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002f7c:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8002f7e:	2000      	movs	r0, #0
 8002f80:	e7fc      	b.n	8002f7c <USBD_LL_ClearStallEP+0x12>
      usb_status = USBD_BUSY;
 8002f82:	2001      	movs	r0, #1
    break;
 8002f84:	e7fa      	b.n	8002f7c <USBD_LL_ClearStallEP+0x12>

08002f86 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002f86:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
 8002f8a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002f8e:	d106      	bne.n	8002f9e <USBD_LL_IsStallEP+0x18>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002f90:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002f94:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8002f98:	f891 022a 	ldrb.w	r0, [r1, #554]	; 0x22a
  }
}
 8002f9c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002f9e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002fa2:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8002fa6:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 8002faa:	4770      	bx	lr

08002fac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8002fac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002fae:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002fb2:	f7fd fb0a 	bl	80005ca <HAL_PCD_SetAddress>
     
  switch (hal_status) {
 8002fb6:	b118      	cbz	r0, 8002fc0 <USBD_LL_SetUSBAddress+0x14>
 8002fb8:	2802      	cmp	r0, #2
 8002fba:	d003      	beq.n	8002fc4 <USBD_LL_SetUSBAddress+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002fbc:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002fbe:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	e7fc      	b.n	8002fbe <USBD_LL_SetUSBAddress+0x12>
      usb_status = USBD_BUSY;
 8002fc4:	2001      	movs	r0, #1
    break;
 8002fc6:	e7fa      	b.n	8002fbe <USBD_LL_SetUSBAddress+0x12>

08002fc8 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8002fc8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002fca:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002fce:	f7fd fb7f 	bl	80006d0 <HAL_PCD_EP_Transmit>
     
  switch (hal_status) {
 8002fd2:	b118      	cbz	r0, 8002fdc <USBD_LL_Transmit+0x14>
 8002fd4:	2802      	cmp	r0, #2
 8002fd6:	d003      	beq.n	8002fe0 <USBD_LL_Transmit+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002fd8:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8002fda:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8002fdc:	2000      	movs	r0, #0
 8002fde:	e7fc      	b.n	8002fda <USBD_LL_Transmit+0x12>
      usb_status = USBD_BUSY;
 8002fe0:	2001      	movs	r0, #1
    break;
 8002fe2:	e7fa      	b.n	8002fda <USBD_LL_Transmit+0x12>

08002fe4 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8002fe4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002fe6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002fea:	f7fd fb52 	bl	8000692 <HAL_PCD_EP_Receive>
     
  switch (hal_status) {
 8002fee:	b118      	cbz	r0, 8002ff8 <USBD_LL_PrepareReceive+0x14>
 8002ff0:	2802      	cmp	r0, #2
 8002ff2:	d003      	beq.n	8002ffc <USBD_LL_PrepareReceive+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002ff4:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002ff6:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	e7fc      	b.n	8002ff6 <USBD_LL_PrepareReceive+0x12>
      usb_status = USBD_BUSY;
 8002ffc:	2001      	movs	r0, #1
    break;
 8002ffe:	e7fa      	b.n	8002ff6 <USBD_LL_PrepareReceive+0x12>

08003000 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003000:	4800      	ldr	r0, [pc, #0]	; (8003004 <USBD_static_malloc+0x4>)
 8003002:	4770      	bx	lr
 8003004:	2000010c 	.word	0x2000010c

08003008 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8003008:	4770      	bx	lr

0800300a <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High Connection State */
   
  } 
/* USER CODE END 5 */
}
 800300a:	4770      	bx	lr

0800300c <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 800300c:	2312      	movs	r3, #18
 800300e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8003010:	4800      	ldr	r0, [pc, #0]	; (8003014 <USBD_FS_DeviceDescriptor+0x8>)
 8003012:	4770      	bx	lr
 8003014:	200000d4 	.word	0x200000d4

08003018 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8003018:	2304      	movs	r3, #4
 800301a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800301c:	4800      	ldr	r0, [pc, #0]	; (8003020 <USBD_FS_LangIDStrDescriptor+0x8>)
 800301e:	4770      	bx	lr
 8003020:	200000e8 	.word	0x200000e8

08003024 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003024:	b508      	push	{r3, lr}
 8003026:	460a      	mov	r2, r1
  if(speed == 0)
 8003028:	b128      	cbz	r0, 8003036 <USBD_FS_ProductStrDescriptor+0x12>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 800302a:	4905      	ldr	r1, [pc, #20]	; (8003040 <USBD_FS_ProductStrDescriptor+0x1c>)
 800302c:	4805      	ldr	r0, [pc, #20]	; (8003044 <USBD_FS_ProductStrDescriptor+0x20>)
 800302e:	f7ff fb24 	bl	800267a <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8003032:	4803      	ldr	r0, [pc, #12]	; (8003040 <USBD_FS_ProductStrDescriptor+0x1c>)
 8003034:	bd08      	pop	{r3, pc}
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003036:	4902      	ldr	r1, [pc, #8]	; (8003040 <USBD_FS_ProductStrDescriptor+0x1c>)
 8003038:	4802      	ldr	r0, [pc, #8]	; (8003044 <USBD_FS_ProductStrDescriptor+0x20>)
 800303a:	f7ff fb1e 	bl	800267a <USBD_GetString>
 800303e:	e7f8      	b.n	8003032 <USBD_FS_ProductStrDescriptor+0xe>
 8003040:	200007b0 	.word	0x200007b0
 8003044:	080031f4 	.word	0x080031f4

08003048 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003048:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800304a:	4c04      	ldr	r4, [pc, #16]	; (800305c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800304c:	460a      	mov	r2, r1
 800304e:	4621      	mov	r1, r4
 8003050:	4803      	ldr	r0, [pc, #12]	; (8003060 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003052:	f7ff fb12 	bl	800267a <USBD_GetString>
  return USBD_StrDesc;
}
 8003056:	4620      	mov	r0, r4
 8003058:	bd10      	pop	{r4, pc}
 800305a:	bf00      	nop
 800305c:	200007b0 	.word	0x200007b0
 8003060:	080031e0 	.word	0x080031e0

08003064 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003064:	b508      	push	{r3, lr}
 8003066:	460a      	mov	r2, r1
  if(speed  == USBD_SPEED_HIGH)
 8003068:	b128      	cbz	r0, 8003076 <USBD_FS_SerialStrDescriptor+0x12>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 800306a:	4905      	ldr	r1, [pc, #20]	; (8003080 <USBD_FS_SerialStrDescriptor+0x1c>)
 800306c:	4805      	ldr	r0, [pc, #20]	; (8003084 <USBD_FS_SerialStrDescriptor+0x20>)
 800306e:	f7ff fb04 	bl	800267a <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8003072:	4803      	ldr	r0, [pc, #12]	; (8003080 <USBD_FS_SerialStrDescriptor+0x1c>)
 8003074:	bd08      	pop	{r3, pc}
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003076:	4902      	ldr	r1, [pc, #8]	; (8003080 <USBD_FS_SerialStrDescriptor+0x1c>)
 8003078:	4802      	ldr	r0, [pc, #8]	; (8003084 <USBD_FS_SerialStrDescriptor+0x20>)
 800307a:	f7ff fafe 	bl	800267a <USBD_GetString>
 800307e:	e7f8      	b.n	8003072 <USBD_FS_SerialStrDescriptor+0xe>
 8003080:	200007b0 	.word	0x200007b0
 8003084:	0800320c 	.word	0x0800320c

08003088 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003088:	b508      	push	{r3, lr}
 800308a:	460a      	mov	r2, r1
  if(speed  == USBD_SPEED_HIGH)
 800308c:	b128      	cbz	r0, 800309a <USBD_FS_ConfigStrDescriptor+0x12>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 800308e:	4905      	ldr	r1, [pc, #20]	; (80030a4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8003090:	4805      	ldr	r0, [pc, #20]	; (80030a8 <USBD_FS_ConfigStrDescriptor+0x20>)
 8003092:	f7ff faf2 	bl	800267a <USBD_GetString>
  }
  return USBD_StrDesc;  
}
 8003096:	4803      	ldr	r0, [pc, #12]	; (80030a4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8003098:	bd08      	pop	{r3, pc}
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800309a:	4902      	ldr	r1, [pc, #8]	; (80030a4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800309c:	4802      	ldr	r0, [pc, #8]	; (80030a8 <USBD_FS_ConfigStrDescriptor+0x20>)
 800309e:	f7ff faec 	bl	800267a <USBD_GetString>
 80030a2:	e7f8      	b.n	8003096 <USBD_FS_ConfigStrDescriptor+0xe>
 80030a4:	200007b0 	.word	0x200007b0
 80030a8:	080031c4 	.word	0x080031c4

080030ac <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80030ac:	b508      	push	{r3, lr}
 80030ae:	460a      	mov	r2, r1
  if(speed == 0)
 80030b0:	b128      	cbz	r0, 80030be <USBD_FS_InterfaceStrDescriptor+0x12>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80030b2:	4905      	ldr	r1, [pc, #20]	; (80030c8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80030b4:	4805      	ldr	r0, [pc, #20]	; (80030cc <USBD_FS_InterfaceStrDescriptor+0x20>)
 80030b6:	f7ff fae0 	bl	800267a <USBD_GetString>
  }
  return USBD_StrDesc;  
}
 80030ba:	4803      	ldr	r0, [pc, #12]	; (80030c8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80030bc:	bd08      	pop	{r3, pc}
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80030be:	4902      	ldr	r1, [pc, #8]	; (80030c8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80030c0:	4802      	ldr	r0, [pc, #8]	; (80030cc <USBD_FS_InterfaceStrDescriptor+0x20>)
 80030c2:	f7ff fada 	bl	800267a <USBD_GetString>
 80030c6:	e7f8      	b.n	80030ba <USBD_FS_InterfaceStrDescriptor+0xe>
 80030c8:	200007b0 	.word	0x200007b0
 80030cc:	080031d0 	.word	0x080031d0

080030d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80030d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80030d2:	e003      	b.n	80030dc <LoopCopyDataInit>

080030d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80030d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80030d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80030da:	3104      	adds	r1, #4

080030dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80030dc:	480a      	ldr	r0, [pc, #40]	; (8003108 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80030e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80030e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80030e4:	d3f6      	bcc.n	80030d4 <CopyDataInit>
  ldr r2, =_sbss
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80030e8:	e002      	b.n	80030f0 <LoopFillZerobss>

080030ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80030ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80030ec:	f842 3b04 	str.w	r3, [r2], #4

080030f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80030f0:	4b08      	ldr	r3, [pc, #32]	; (8003114 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80030f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80030f4:	d3f9      	bcc.n	80030ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030f6:	f7ff fe23 	bl	8002d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030fa:	f000 f80f 	bl	800311c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030fe:	f7ff fbbf 	bl	8002880 <main>
  bx lr
 8003102:	4770      	bx	lr
  ldr r3, =_sidata
 8003104:	08003224 	.word	0x08003224
  ldr r0, =_sdata
 8003108:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800310c:	200000ec 	.word	0x200000ec
  ldr r2, =_sbss
 8003110:	200000ec 	.word	0x200000ec
  ldr r3, = _ebss
 8003114:	200009b0 	.word	0x200009b0

08003118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003118:	e7fe      	b.n	8003118 <ADC1_2_IRQHandler>
	...

0800311c <__libc_init_array>:
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	2500      	movs	r5, #0
 8003120:	4e0c      	ldr	r6, [pc, #48]	; (8003154 <__libc_init_array+0x38>)
 8003122:	4c0d      	ldr	r4, [pc, #52]	; (8003158 <__libc_init_array+0x3c>)
 8003124:	1ba4      	subs	r4, r4, r6
 8003126:	10a4      	asrs	r4, r4, #2
 8003128:	42a5      	cmp	r5, r4
 800312a:	d109      	bne.n	8003140 <__libc_init_array+0x24>
 800312c:	f000 f81a 	bl	8003164 <_init>
 8003130:	2500      	movs	r5, #0
 8003132:	4e0a      	ldr	r6, [pc, #40]	; (800315c <__libc_init_array+0x40>)
 8003134:	4c0a      	ldr	r4, [pc, #40]	; (8003160 <__libc_init_array+0x44>)
 8003136:	1ba4      	subs	r4, r4, r6
 8003138:	10a4      	asrs	r4, r4, #2
 800313a:	42a5      	cmp	r5, r4
 800313c:	d105      	bne.n	800314a <__libc_init_array+0x2e>
 800313e:	bd70      	pop	{r4, r5, r6, pc}
 8003140:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003144:	4798      	blx	r3
 8003146:	3501      	adds	r5, #1
 8003148:	e7ee      	b.n	8003128 <__libc_init_array+0xc>
 800314a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800314e:	4798      	blx	r3
 8003150:	3501      	adds	r5, #1
 8003152:	e7f2      	b.n	800313a <__libc_init_array+0x1e>
 8003154:	0800321c 	.word	0x0800321c
 8003158:	0800321c 	.word	0x0800321c
 800315c:	0800321c 	.word	0x0800321c
 8003160:	08003220 	.word	0x08003220

08003164 <_init>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	bf00      	nop
 8003168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316a:	bc08      	pop	{r3}
 800316c:	469e      	mov	lr, r3
 800316e:	4770      	bx	lr

08003170 <_fini>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	bf00      	nop
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr
